
PRJ5_Alimentador_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003978  08003978  00004978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  00005074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003aa8  08003aa8  00004aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab0  08003ab0  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00004ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00004ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003ab8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000074  08003b2c  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003b2c  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be15  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbe  00000000  00000000  00010eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00012e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a07  00000000  00000000  00013b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023092  00000000  00000000  0001458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f641  00000000  00000000  00037621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2344  00000000  00000000  00046c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e14  00000000  00000000  00118fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0011ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003960 	.word	0x08003960

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08003960 	.word	0x08003960

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HX711_ReadRaw>:
#define TEMPO_AJUSTE 500  // Tempo de ajuste entre as leituras

// --- FUNÇÕES AUXILIARES ---
    // GPIOs já configurados no CubeMX (MX_GPIO_Init já inicializa a célula de carga)

static int32_t HX711_ReadRaw(void) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
    int32_t data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(HX711_DATA_GPIO_Port, HX711_DATA_Pin)); // Aguarda sinal LOW
 80005e6:	bf00      	nop
 80005e8:	2101      	movs	r1, #1
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <HX711_ReadRaw+0x84>)
 80005ec:	f000 fff8 	bl	80015e0 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f8      	bne.n	80005e8 <HX711_ReadRaw+0xc>

    for (int i = 0; i < 24; i++) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	e015      	b.n	8000628 <HX711_ReadRaw+0x4c>
        HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2102      	movs	r1, #2
 8000600:	4817      	ldr	r0, [pc, #92]	@ (8000660 <HX711_ReadRaw+0x84>)
 8000602:	f001 f805 	bl	8001610 <HAL_GPIO_WritePin>
        data = (data << 1) | HAL_GPIO_ReadPin(HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	005c      	lsls	r4, r3, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4814      	ldr	r0, [pc, #80]	@ (8000660 <HX711_ReadRaw+0x84>)
 800060e:	f000 ffe7 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	4323      	orrs	r3, r4
 8000616:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <HX711_ReadRaw+0x84>)
 800061e:	f000 fff7 	bl	8001610 <HAL_GPIO_WritePin>
    for (int i = 0; i < 24; i++) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b17      	cmp	r3, #23
 800062c:	dde6      	ble.n	80005fc <HX711_ReadRaw+0x20>
    }

    // Ganho 128
    HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HX711_ReadRaw+0x84>)
 8000634:	f000 ffec 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <HX711_ReadRaw+0x84>)
 800063e:	f000 ffe7 	bl	8001610 <HAL_GPIO_WritePin>

    if (data & 0x800000) data |= 0xFF000000;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <HX711_ReadRaw+0x78>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000652:	607b      	str	r3, [r7, #4]

    return data;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	40020800 	.word	0x40020800

08000664 <Motor_Init>:

static void Motor_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066e:	4802      	ldr	r0, [pc, #8]	@ (8000678 <Motor_Init+0x14>)
 8000670:	f000 ffce 	bl	8001610 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400

0800067c <Motor_Dispense>:

void Motor_Dispense
(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    // Ativa o motor para abrir a tampa
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000686:	481d      	ldr	r0, [pc, #116]	@ (80006fc <Motor_Dispense+0x80>)
 8000688:	f000 ffc2 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000692:	481b      	ldr	r0, [pc, #108]	@ (8000700 <Motor_Dispense+0x84>)
 8000694:	f000 ffbc 	bl	8001610 <HAL_GPIO_WritePin>

    HAL_Delay(500); // tempo para abrir a tampa (ajuste conforme necessário)
 8000698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069c:	f000 fcd6 	bl	800104c <HAL_Delay>

    // Para o motor para impedir movimento adicional
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a6:	4815      	ldr	r0, [pc, #84]	@ (80006fc <Motor_Dispense+0x80>)
 80006a8:	f000 ffb2 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <Motor_Dispense+0x84>)
 80006b4:	f000 ffac 	bl	8001610 <HAL_GPIO_WritePin>

    // Aguarda um tempo para liberar a ração
    HAL_Delay(1000); // tempo para ração ser liberada (ajuste conforme necessário)
 80006b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006bc:	f000 fcc6 	bl	800104c <HAL_Delay>

    // Ativa o motor para fechar a tampa
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c6:	480d      	ldr	r0, [pc, #52]	@ (80006fc <Motor_Dispense+0x80>)
 80006c8:	f000 ffa2 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <Motor_Dispense+0x84>)
 80006d4:	f000 ff9c 	bl	8001610 <HAL_GPIO_WritePin>

    HAL_Delay(200); // tempo para fechar a tampa (ajuste conforme necessário)
 80006d8:	20c8      	movs	r0, #200	@ 0xc8
 80006da:	f000 fcb7 	bl	800104c <HAL_Delay>

    // Para o motor
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <Motor_Dispense+0x80>)
 80006e6:	f000 ff93 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Motor_Dispense+0x84>)
 80006f2:	f000 ff8d 	bl	8001610 <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400

08000704 <Motor_Dispense_Disable>:


static void Motor_Dispense_Disable(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <Motor_Dispense_Disable+0x20>)
 8000710:	f000 ff7e 	bl	8001610 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <Motor_Dispense_Disable+0x24>)
 800071c:	f000 ff78 	bl	8001610 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020000 	.word	0x40020000
 8000728:	40020400 	.word	0x40020400

0800072c <App_Init>:


// --- FUNÇÕES PRINCIPAIS ---

void App_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    Display_Init();
 8000730:	f000 f860 	bl	80007f4 <Display_Init>
    Display_ShowMenu();
 8000734:	f000 f870 	bl	8000818 <Display_ShowMenu>
    Motor_Init();
 8000738:	f7ff ff94 	bl	8000664 <Motor_Init>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <App_Run>:

void App_Run(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
    int32_t peso = HX711_ReadRaw();  // Leitura inicial do peso
 8000746:	f7ff ff49 	bl	80005dc <HX711_ReadRaw>
 800074a:	60f8      	str	r0, [r7, #12]
    int32_t pesoAnterior = peso;     // Para verificar variações no peso
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60bb      	str	r3, [r7, #8]
    int32_t pesoDiferenca = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
    uint32_t tempoInicio = HAL_GetTick();  // Marca o tempo de início da operação
 8000754:	f000 fc6e 	bl	8001034 <HAL_GetTick>
 8000758:	6038      	str	r0, [r7, #0]

    Display_ShowMessage("Iniciando...", 0);  // Exibe mensagem inicial no display
 800075a:	2100      	movs	r1, #0
 800075c:	4820      	ldr	r0, [pc, #128]	@ (80007e0 <App_Run+0xa0>)
 800075e:	f000 f87f 	bl	8000860 <Display_ShowMessage>

    // Loop de dispense até atingir o peso de corte
    while (peso < PESO_CORTE) {
 8000762:	e02d      	b.n	80007c0 <App_Run+0x80>
        Motor_Dispense();  // Ativa o motor para dispensar ração
 8000764:	f7ff ff8a 	bl	800067c <Motor_Dispense>
        HAL_Delay(TEMPO_AJUSTE);  // Aguarda um tempo para estabilizar a leitura
 8000768:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076c:	f000 fc6e 	bl	800104c <HAL_Delay>

        peso = HX711_ReadRaw();  // Lê o peso após o dispense
 8000770:	f7ff ff34 	bl	80005dc <HX711_ReadRaw>
 8000774:	60f8      	str	r0, [r7, #12]

        // Calcula a diferença de peso
        pesoDiferenca = peso - pesoAnterior;
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	607b      	str	r3, [r7, #4]

        // Exibe o peso e o progresso no display
        Display_ShowMessage("Pesando...", 0);
 800077e:	2100      	movs	r1, #0
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <App_Run+0xa4>)
 8000782:	f000 f86d 	bl	8000860 <Display_ShowMessage>
        Display_ShowProgressBar(peso, PESO_CORTE);
 8000786:	2132      	movs	r1, #50	@ 0x32
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 f87b 	bl	8000884 <Display_ShowProgressBar>

        // Verifica se a diferença de peso é muito pequena
        if (pesoDiferenca < 1) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	dc03      	bgt.n	800079c <App_Run+0x5c>
            Display_ShowMessage("Peso está estável", 1);  // Feedback se o peso não mudar
 8000794:	2101      	movs	r1, #1
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <App_Run+0xa8>)
 8000798:	f000 f862 	bl	8000860 <Display_ShowMessage>
        }

        // Verifica o tempo máximo de dispense, caso queira evitar loops infinitos
        if (HAL_GetTick() - tempoInicio > 30000) {  // Exemplo de timeout de 30 segundos
 800079c:	f000 fc4a 	bl	8001034 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d906      	bls.n	80007bc <App_Run+0x7c>
            Display_ShowMessage("Tempo excedido!", 1);  // Exibe erro se o tempo foi excedido
 80007ae:	2101      	movs	r1, #1
 80007b0:	480e      	ldr	r0, [pc, #56]	@ (80007ec <App_Run+0xac>)
 80007b2:	f000 f855 	bl	8000860 <Display_ShowMessage>
            Motor_Dispense_Disable();  // Desliga o motor em caso de erro
 80007b6:	f7ff ffa5 	bl	8000704 <Motor_Dispense_Disable>
            return;  // Sai da função
 80007ba:	e00e      	b.n	80007da <App_Run+0x9a>
        }

        // Atualiza a variável pesoAnterior para a próxima comparação
        pesoAnterior = peso;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	60bb      	str	r3, [r7, #8]
    while (peso < PESO_CORTE) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b31      	cmp	r3, #49	@ 0x31
 80007c4:	ddce      	ble.n	8000764 <App_Run+0x24>
    }

    // Quando atingir o peso de corte, desliga o motor
    Motor_Dispense_Disable();
 80007c6:	f7ff ff9d 	bl	8000704 <Motor_Dispense_Disable>

    // Feedback visual de sucesso
    Display_ShowMessage("Peso alcançado!", 0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <App_Run+0xb0>)
 80007ce:	f000 f847 	bl	8000860 <Display_ShowMessage>

    // Pode adicionar uma pausa antes de finalizar ou reiniciar
    HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d6:	f000 fc39 	bl	800104c <HAL_Delay>
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08003978 	.word	0x08003978
 80007e4:	08003988 	.word	0x08003988
 80007e8:	08003994 	.word	0x08003994
 80007ec:	080039a8 	.word	0x080039a8
 80007f0:	080039b8 	.word	0x080039b8

080007f4 <Display_Init>:
    "2. Configurar horario",
    "3. Sair"
};

// Função de inicialização do display
void Display_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Simula o tempo de inicialização do display
 80007f8:	2064      	movs	r0, #100	@ 0x64
 80007fa:	f000 fc27 	bl	800104c <HAL_Delay>
    // Aqui você pode adicionar mais código para configurar o display.
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <Display_Print>:

// Função para imprimir uma string no display
void Display_Print(const char *str) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
    // Como o display real ainda não está configurado, vamos simular a impressão
    printf("%s\n", str);  // Simula a impressão no console
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f002 fa12 	bl	8002c34 <puts>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Display_ShowMenu>:

// Função para mostrar o menu no display
void Display_ShowMenu(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
    printf("\n=== Menu Principal ===\n");
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <Display_ShowMenu+0x3c>)
 8000820:	f002 fa08 	bl	8002c34 <puts>

    for (int i = 0; i < MENU_TOTAL_OPCOES; ++i) {
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	e009      	b.n	800083e <Display_ShowMenu+0x26>
        Display_Print(menu_opcoes[i]);
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <Display_ShowMenu+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffe5 	bl	8000802 <Display_Print>
    for (int i = 0; i < MENU_TOTAL_OPCOES; ++i) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b02      	cmp	r3, #2
 8000842:	ddf2      	ble.n	800082a <Display_ShowMenu+0x12>
    }

    printf("======================\n");
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <Display_ShowMenu+0x44>)
 8000846:	f002 f9f5 	bl	8002c34 <puts>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	08003a00 	.word	0x08003a00
 8000858:	20000000 	.word	0x20000000
 800085c:	08003a18 	.word	0x08003a18

08000860 <Display_ShowMessage>:

// Função para exibir uma mensagem no display
void Display_ShowMessage(const char *msg, uint8_t linha) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
    // Para simular, apenas imprime a mensagem no console
    printf("Mensagem linha %d: %s\n", linha, msg);
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	4803      	ldr	r0, [pc, #12]	@ (8000880 <Display_ShowMessage+0x20>)
 8000874:	f002 f96e 	bl	8002b54 <iprintf>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08003a30 	.word	0x08003a30

08000884 <Display_ShowProgressBar>:

// Função para exibir uma barra de progresso no display
void Display_ShowProgressBar(int32_t valorAtual, int32_t valorMaximo) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    // Calculando a porcentagem de progresso
    int32_t progresso = (valorAtual * 100) / valorMaximo;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2264      	movs	r2, #100	@ 0x64
 8000892:	fb03 f202 	mul.w	r2, r3, r2
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	fb92 f3f3 	sdiv	r3, r2, r3
 800089c:	60fb      	str	r3, [r7, #12]

    // Limitando a barra a 100%
    if (progresso > 100) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b64      	cmp	r3, #100	@ 0x64
 80008a2:	dd01      	ble.n	80008a8 <Display_ShowProgressBar+0x24>
        progresso = 100;
 80008a4:	2364      	movs	r3, #100	@ 0x64
 80008a6:	60fb      	str	r3, [r7, #12]
    }

    // Exibindo a barra de progresso no console
    printf("Progresso: [");
 80008a8:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <Display_ShowProgressBar+0x6c>)
 80008aa:	f002 f953 	bl	8002b54 <iprintf>
    for (int i = 0; i < 50; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	e011      	b.n	80008d8 <Display_ShowProgressBar+0x54>
        if (i < progresso / 2) {  // Cada ">" representa 2% de progresso
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	0fda      	lsrs	r2, r3, #31
 80008b8:	4413      	add	r3, r2
 80008ba:	105b      	asrs	r3, r3, #1
 80008bc:	461a      	mov	r2, r3
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4293      	cmp	r3, r2
 80008c2:	da03      	bge.n	80008cc <Display_ShowProgressBar+0x48>
            printf("=");
 80008c4:	203d      	movs	r0, #61	@ 0x3d
 80008c6:	f002 f957 	bl	8002b78 <putchar>
 80008ca:	e002      	b.n	80008d2 <Display_ShowProgressBar+0x4e>
        } else {
            printf(" ");
 80008cc:	2020      	movs	r0, #32
 80008ce:	f002 f953 	bl	8002b78 <putchar>
    for (int i = 0; i < 50; i++) {
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b31      	cmp	r3, #49	@ 0x31
 80008dc:	ddea      	ble.n	80008b4 <Display_ShowProgressBar+0x30>
        }
    }
    printf("] %ld%%\n", progresso);  // Usando %ld para int32_t
 80008de:	68f9      	ldr	r1, [r7, #12]
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <Display_ShowProgressBar+0x70>)
 80008e2:	f002 f937 	bl	8002b54 <iprintf>

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08003a48 	.word	0x08003a48
 80008f4:	08003a58 	.word	0x08003a58

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fb34 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f80c 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f8ea 	bl	8000adc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000908:	f000 f89c 	bl	8000a44 <MX_TIM2_Init>
  MX_SPI1_Init();
 800090c:	f000 f864 	bl	80009d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8000910:	f7ff ff0c 	bl	800072c <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Run();
 8000914:	f7ff ff14 	bl	8000740 <App_Run>
 8000918:	e7fc      	b.n	8000914 <main+0x1c>
	...

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2234      	movs	r2, #52	@ 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fa62 	bl	8002df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <SystemClock_Config+0xb4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <SystemClock_Config+0xb4>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <SystemClock_Config+0xb4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <SystemClock_Config+0xb8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000968:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <SystemClock_Config+0xb8>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <SystemClock_Config+0xb8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000984:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f8e8 	bl	8001b64 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800099a:	f000 f92f 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fe43 	bl	8001644 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009c4:	f000 f91a 	bl	8000bfc <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	@ 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	@ (8000a40 <MX_SPI1_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_SPI1_Init+0x64>)
 8000a2a:	f001 fb39 	bl	80020a0 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a34:	f000 f8e2 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000090 	.word	0x20000090
 8000a40:	40013000 	.word	0x40013000

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25-1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a6a:	2218      	movs	r2, #24
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a76:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a88:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000a8a:	f001 fb92 	bl	80021b2 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a94:	f000 f8b2 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000aa6:	f001 fcc3 	bl	8002430 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ab0:	f000 f8a4 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_TIM2_Init+0x94>)
 8000ac2:	f001 fef5 	bl	80028b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f896 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000e8 	.word	0x200000e8

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a3c      	ldr	r2, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b3a      	ldr	r3, [pc, #232]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a35      	ldr	r2, [pc, #212]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a2e      	ldr	r2, [pc, #184]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a27      	ldr	r2, [pc, #156]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RES_DSP_Pin|DC_DSP_Pin|BLK_DSP_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2170      	movs	r1, #112	@ 0x70
 8000b66:	4822      	ldr	r0, [pc, #136]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000b68:	f000 fd52 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b72:	4820      	ldr	r0, [pc, #128]	@ (8000bf4 <MX_GPIO_Init+0x118>)
 8000b74:	f000 fd4c 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LOAD_DATA_Pin LOAD_CLK_Pin FAULT_Pin */
  GPIO_InitStruct.Pin = LOAD_DATA_Pin|LOAD_CLK_Pin|FAULT_Pin;
 8000b78:	2323      	movs	r3, #35	@ 0x23
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481b      	ldr	r0, [pc, #108]	@ (8000bf8 <MX_GPIO_Init+0x11c>)
 8000b8c:	f000 fb94 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_DSP_Pin DC_DSP_Pin BLK_DSP_Pin */
  GPIO_InitStruct.Pin = RES_DSP_Pin|DC_DSP_Pin|BLK_DSP_Pin;
 8000b90:	2370      	movs	r3, #112	@ 0x70
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000ba8:	f000 fb86 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC1_IN2_Pin */
  GPIO_InitStruct.Pin = DC1_IN2_Pin;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC1_IN2_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <MX_GPIO_Init+0x118>)
 8000bc6:	f000 fb77 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC1_IN1_Pin */
  GPIO_InitStruct.Pin = DC1_IN1_Pin;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DC1_IN1_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000be0:	f000 fb6a 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40020800 	.word	0x40020800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|MOSI_DSP_Pin;
 8000cb2:	2328      	movs	r3, #40	@ 0x28
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 faf3 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf8:	d115      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f000 fa95 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f000 faae 	bl	8001282 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f93f 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <TIM2_IRQHandler+0x10>)
 8000d9a:	f001 fa59 	bl	8002250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000e8 	.word	0x200000e8

08000da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
  }

  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e009      	b.n	8000e08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf1      	blt.n	8000df4 <_write+0x12>
  }
  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f001 ffec 	bl	8002e90 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000130 	.word	0x20000130
 8000eec:	20000288 	.word	0x20000288

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 ffab 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fcd7 	bl	80008f8 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f58:	08003ab8 	.word	0x08003ab8
  ldr r2, =_sbss
 8000f5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f60:	20000284 	.word	0x20000284

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f94f 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fe34 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f967 	bl	800129e <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f92f 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000014 	.word	0x20000014
 8001008:	20000010 	.word	0x20000010

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000014 	.word	0x20000014
 8001030:	20000134 	.word	0x20000134

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000134 	.word	0x20000134

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000014 	.word	0x20000014

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	@ (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	@ (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff3e 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff31 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e165      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8154 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80ae 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b5d      	ldr	r3, [pc, #372]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a5c      	ldr	r2, [pc, #368]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b5a      	ldr	r3, [pc, #360]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	@ (80015c0 <HAL_GPIO_Init+0x308>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	@ (80015c4 <HAL_GPIO_Init+0x30c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	@ (80015c8 <HAL_GPIO_Init+0x310>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	@ (80015cc <HAL_GPIO_Init+0x314>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	@ (80015d0 <HAL_GPIO_Init+0x318>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x20a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	@ (80015d4 <HAL_GPIO_Init+0x31c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x206>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_GPIO_Init+0x320>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x202>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	@ (80015bc <HAL_GPIO_Init+0x304>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <HAL_GPIO_Init+0x324>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a31      	ldr	r2, [pc, #196]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <HAL_GPIO_Init+0x324>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_GPIO_Init+0x324>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae96 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cc      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b68      	ldr	r3, [pc, #416]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d90c      	bls.n	8001680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b65      	ldr	r3, [pc, #404]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a58      	ldr	r2, [pc, #352]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a52      	ldr	r2, [pc, #328]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d044      	beq.n	8001764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b3f      	ldr	r3, [pc, #252]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e067      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4934      	ldr	r1, [pc, #208]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff fc7e 	bl	8001034 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff fc7a 	bl	8001034 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e04f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d20c      	bcs.n	800178c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f821 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	@ (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fbde 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00
 8001800:	40023800 	.word	0x40023800
 8001804:	08003a64 	.word	0x08003a64
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20000010 	.word	0x20000010

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001814:	b0a6      	sub	sp, #152	@ 0x98
 8001816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001836:	4bc8      	ldr	r3, [pc, #800]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b0c      	cmp	r3, #12
 8001840:	f200 817e 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x330>
 8001844:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	08001881 	.word	0x08001881
 8001850:	08001b41 	.word	0x08001b41
 8001854:	08001b41 	.word	0x08001b41
 8001858:	08001b41 	.word	0x08001b41
 800185c:	08001889 	.word	0x08001889
 8001860:	08001b41 	.word	0x08001b41
 8001864:	08001b41 	.word	0x08001b41
 8001868:	08001b41 	.word	0x08001b41
 800186c:	08001891 	.word	0x08001891
 8001870:	08001b41 	.word	0x08001b41
 8001874:	08001b41 	.word	0x08001b41
 8001878:	08001b41 	.word	0x08001b41
 800187c:	080019fb 	.word	0x080019fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4bb6      	ldr	r3, [pc, #728]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001886:	e15f      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001888:	4bb5      	ldr	r3, [pc, #724]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x350>)
 800188a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800188e:	e15b      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4bb1      	ldr	r3, [pc, #708]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189c:	4bae      	ldr	r3, [pc, #696]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d031      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	4bab      	ldr	r3, [pc, #684]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	2200      	movs	r2, #0
 80018b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80018bc:	2300      	movs	r3, #0
 80018be:	667b      	str	r3, [r7, #100]	@ 0x64
 80018c0:	4ba7      	ldr	r3, [pc, #668]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x350>)
 80018c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018c6:	462a      	mov	r2, r5
 80018c8:	fb03 f202 	mul.w	r2, r3, r2
 80018cc:	2300      	movs	r3, #0
 80018ce:	4621      	mov	r1, r4
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	4aa2      	ldr	r2, [pc, #648]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x350>)
 80018d8:	4621      	mov	r1, r4
 80018da:	fba1 1202 	umull	r1, r2, r1, r2
 80018de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80018e0:	460a      	mov	r2, r1
 80018e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018e6:	4413      	add	r3, r2
 80018e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018ee:	2200      	movs	r2, #0
 80018f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018fc:	f7fe fcd8 	bl	80002b0 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800190a:	e064      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190c:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	2200      	movs	r2, #0
 8001914:	653b      	str	r3, [r7, #80]	@ 0x50
 8001916:	657a      	str	r2, [r7, #84]	@ 0x54
 8001918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800191a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001924:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001928:	4622      	mov	r2, r4
 800192a:	462b      	mov	r3, r5
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	0159      	lsls	r1, r3, #5
 8001936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193a:	0150      	lsls	r0, r2, #5
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4621      	mov	r1, r4
 8001942:	1a51      	subs	r1, r2, r1
 8001944:	6139      	str	r1, [r7, #16]
 8001946:	4629      	mov	r1, r5
 8001948:	eb63 0301 	sbc.w	r3, r3, r1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800195a:	4659      	mov	r1, fp
 800195c:	018b      	lsls	r3, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001964:	4651      	mov	r1, sl
 8001966:	018a      	lsls	r2, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ebb2 0801 	subs.w	r8, r2, r1
 800196e:	4659      	mov	r1, fp
 8001970:	eb63 0901 	sbc.w	r9, r3, r1
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001980:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001984:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001988:	4690      	mov	r8, r2
 800198a:	4699      	mov	r9, r3
 800198c:	4623      	mov	r3, r4
 800198e:	eb18 0303 	adds.w	r3, r8, r3
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	462b      	mov	r3, r5
 8001996:	eb49 0303 	adc.w	r3, r9, r3
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019a8:	4629      	mov	r1, r5
 80019aa:	028b      	lsls	r3, r1, #10
 80019ac:	4621      	mov	r1, r4
 80019ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b2:	4621      	mov	r1, r4
 80019b4:	028a      	lsls	r2, r1, #10
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019be:	2200      	movs	r2, #0
 80019c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80019c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80019c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019c8:	f7fe fc72 	bl	80002b0 <__aeabi_uldivmod>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4613      	mov	r3, r2
 80019d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80019e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019f8:	e0a6      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fa:	4b57      	ldr	r3, [pc, #348]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a06:	4b54      	ldr	r3, [pc, #336]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02a      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a24:	2100      	movs	r1, #0
 8001a26:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a28:	fb03 f201 	mul.w	r2, r3, r1
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	fb00 f303 	mul.w	r3, r0, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	4a4a      	ldr	r2, [pc, #296]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a36:	fba0 1202 	umull	r1, r2, r0, r2
 8001a3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001a40:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001a42:	4413      	add	r3, r2
 8001a44:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a58:	f7fe fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a66:	e05b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	4b3b      	ldr	r3, [pc, #236]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001abc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	00eb      	lsls	r3, r5, #3
 8001ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	464b      	mov	r3, r9
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af2:	4629      	mov	r1, r5
 8001af4:	028b      	lsls	r3, r1, #10
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001afc:	4621      	mov	r1, r4
 8001afe:	028a      	lsls	r2, r1, #10
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	61fa      	str	r2, [r7, #28]
 8001b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b12:	f7fe fbcd 	bl	80002b0 <__aeabi_uldivmod>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0f1b      	lsrs	r3, r3, #28
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b3e:	e003      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3798      	adds	r7, #152	@ 0x98
 8001b50:	46bd      	mov	sp, r7
 8001b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	00f42400 	.word	0x00f42400
 8001b60:	017d7840 	.word	0x017d7840

08001b64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e28d      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8083 	beq.w	8001c8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b84:	4b94      	ldr	r3, [pc, #592]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b90:	4b91      	ldr	r3, [pc, #580]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d112      	bne.n	8001bdc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb6:	4b88      	ldr	r3, [pc, #544]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc2:	d10b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4b84      	ldr	r3, [pc, #528]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d05b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x124>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d157      	bne.n	8001c88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e25a      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be4:	d106      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x90>
 8001be6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7b      	ldr	r2, [pc, #492]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xcc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xb4>
 8001bfe:	4b76      	ldr	r3, [pc, #472]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a75      	ldr	r2, [pc, #468]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b73      	ldr	r3, [pc, #460]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a72      	ldr	r2, [pc, #456]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xcc>
 8001c18:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f9fc 	bl	8001034 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f9f8 	bl	8001034 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e21f      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b61      	ldr	r3, [pc, #388]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xdc>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f9e8 	bl	8001034 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f9e4 	bl	8001034 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e20b      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b57      	ldr	r3, [pc, #348]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x104>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06f      	beq.n	8001d76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c96:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ca2:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cae:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc6:	4b44      	ldr	r3, [pc, #272]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b41      	ldr	r3, [pc, #260]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x186>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1d3      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4937      	ldr	r1, [pc, #220]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <HAL_RCC_OscConfig+0x278>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f991 	bl	8001034 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff f98d 	bl	8001034 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1b4      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4925      	ldr	r1, [pc, #148]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_OscConfig+0x278>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f970 	bl	8001034 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f96c 	bl	8001034 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e193      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d036      	beq.n	8001df0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f950 	bl	8001034 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff f94c 	bl	8001034 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e173      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x234>
 8001db6:	e01b      	b.n	8001df0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f939 	bl	8001034 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc4:	e00e      	b.n	8001de4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f935 	bl	8001034 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d907      	bls.n	8001de4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e15c      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	42470000 	.word	0x42470000
 8001de0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b8a      	ldr	r3, [pc, #552]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ea      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8097 	beq.w	8001f2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b83      	ldr	r3, [pc, #524]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10f      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b7f      	ldr	r3, [pc, #508]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a7e      	ldr	r2, [pc, #504]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b79      	ldr	r3, [pc, #484]	@ (8002014 <HAL_RCC_OscConfig+0x4b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b76      	ldr	r3, [pc, #472]	@ (8002014 <HAL_RCC_OscConfig+0x4b0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a75      	ldr	r2, [pc, #468]	@ (8002014 <HAL_RCC_OscConfig+0x4b0>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7ff f8f5 	bl	8001034 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7ff f8f1 	bl	8001034 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e118      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4b6c      	ldr	r3, [pc, #432]	@ (8002014 <HAL_RCC_OscConfig+0x4b0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x31e>
 8001e74:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x358>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x340>
 8001e8a:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a60      	ldr	r2, [pc, #384]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	4b5e      	ldr	r3, [pc, #376]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x358>
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a59      	ldr	r2, [pc, #356]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	4a56      	ldr	r2, [pc, #344]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f8b6 	bl	8001034 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f8b2 	bl	8001034 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0d7      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ee      	beq.n	8001ecc <HAL_RCC_OscConfig+0x368>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f8a0 	bl	8001034 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f89c 	bl	8001034 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0c1      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	4b40      	ldr	r3, [pc, #256]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ee      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4a3a      	ldr	r2, [pc, #232]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80ad 	beq.w	8002090 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f36:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d060      	beq.n	8002004 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d145      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <HAL_RCC_OscConfig+0x4b4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff f870 	bl	8001034 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f86c 	bl	8001034 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e093      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	019b      	lsls	r3, r3, #6
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	071b      	lsls	r3, r3, #28
 8001fa2:	491b      	ldr	r1, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCC_OscConfig+0x4b4>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f841 	bl	8001034 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f83d 	bl	8001034 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e064      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x452>
 8001fd4:	e05c      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_RCC_OscConfig+0x4b4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f82a 	bl	8001034 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f826 	bl	8001034 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04d      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x480>
 8002002:	e045      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e040      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800201c:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_RCC_OscConfig+0x538>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d030      	beq.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d129      	bne.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d122      	bne.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d119      	bne.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d10f      	bne.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07b      	b.n	80021aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c2:	d009      	beq.n	80020d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
 80020ca:	e005      	b.n	80020d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fdb0 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215c:	ea42 0103 	orr.w	r1, r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	f003 0104 	and.w	r1, r3, #4
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f003 0210 	and.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e041      	b.n	8002248 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fd85 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f000 fa17 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d020      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0202 	mvn.w	r2, #2
 8002284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f9a3 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f995 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9a6 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0204 	mvn.w	r2, #4
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f97d 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f96f 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f980 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d020      	beq.n	800234c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0208 	mvn.w	r2, #8
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f957 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f949 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f95a 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f931 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f923 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f934 	bl	80025fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0201 	mvn.w	r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f901 	bl	80025be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 faee 	bl	80029bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f905 	bl	800260e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fac0 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x1c>
 8002448:	2302      	movs	r3, #2
 800244a:	e0b4      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x186>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800246a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xd4>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002492:	f000 8086 	beq.w	80025a2 <HAL_TIM_ConfigClockSource+0x172>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b70      	cmp	r3, #112	@ 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xa6>
 80024a0:	2b70      	cmp	r3, #112	@ 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b60      	cmp	r3, #96	@ 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x11a>
 80024a8:	2b60      	cmp	r3, #96	@ 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b50      	cmp	r3, #80	@ 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xfa>
 80024b0:	2b50      	cmp	r3, #80	@ 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x13a>
 80024b8:	2b40      	cmp	r3, #64	@ 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b30      	cmp	r3, #48	@ 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b30      	cmp	r3, #48	@ 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024e6:	f000 f9c3 	bl	8002870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04f      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002514:	f000 f9ac 	bl	8002870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f920 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	@ 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f979 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002548:	e02c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f93f 	bl	80027da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	@ 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f969 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002568:	e01c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f900 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	@ 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f959 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002588:	e00c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f950 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800259a:	e003      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e000      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a46      	ldr	r2, [pc, #280]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d00f      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a43      	ldr	r2, [pc, #268]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00b      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a42      	ldr	r2, [pc, #264]	@ (8002758 <TIM_Base_SetConfig+0x134>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a41      	ldr	r2, [pc, #260]	@ (800275c <TIM_Base_SetConfig+0x138>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a40      	ldr	r2, [pc, #256]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a35      	ldr	r2, [pc, #212]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002684:	d027      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a32      	ldr	r2, [pc, #200]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d023      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a31      	ldr	r2, [pc, #196]	@ (8002758 <TIM_Base_SetConfig+0x134>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a30      	ldr	r2, [pc, #192]	@ (800275c <TIM_Base_SetConfig+0x138>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01b      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d017      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002764 <TIM_Base_SetConfig+0x140>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <TIM_Base_SetConfig+0x144>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a2c      	ldr	r2, [pc, #176]	@ (800276c <TIM_Base_SetConfig+0x148>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002770 <TIM_Base_SetConfig+0x14c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002774 <TIM_Base_SetConfig+0x150>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a29      	ldr	r2, [pc, #164]	@ (8002778 <TIM_Base_SetConfig+0x154>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  }
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40010400 	.word	0x40010400
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	40001800 	.word	0x40001800
 8002774:	40001c00 	.word	0x40001c00
 8002778:	40002000 	.word	0x40002000

0800277c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 030a 	bic.w	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f023 0210 	bic.w	r2, r3, #16
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800288a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	431a      	orrs	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e05a      	b.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002914:	d01d      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1b      	ldr	r2, [pc, #108]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a18      	ldr	r2, [pc, #96]	@ (800299c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10c      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40010400 	.word	0x40010400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40001800 	.word	0x40001800

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <std>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	b510      	push	{r4, lr}
 80029d4:	4604      	mov	r4, r0
 80029d6:	e9c0 3300 	strd	r3, r3, [r0]
 80029da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029de:	6083      	str	r3, [r0, #8]
 80029e0:	8181      	strh	r1, [r0, #12]
 80029e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80029e4:	81c2      	strh	r2, [r0, #14]
 80029e6:	6183      	str	r3, [r0, #24]
 80029e8:	4619      	mov	r1, r3
 80029ea:	2208      	movs	r2, #8
 80029ec:	305c      	adds	r0, #92	@ 0x5c
 80029ee:	f000 fa01 	bl	8002df4 <memset>
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <std+0x58>)
 80029f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <std+0x5c>)
 80029f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <std+0x60>)
 80029fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80029fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <std+0x64>)
 8002a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a02:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <std+0x68>)
 8002a04:	6224      	str	r4, [r4, #32]
 8002a06:	429c      	cmp	r4, r3
 8002a08:	d006      	beq.n	8002a18 <std+0x48>
 8002a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a0e:	4294      	cmp	r4, r2
 8002a10:	d002      	beq.n	8002a18 <std+0x48>
 8002a12:	33d0      	adds	r3, #208	@ 0xd0
 8002a14:	429c      	cmp	r4, r3
 8002a16:	d105      	bne.n	8002a24 <std+0x54>
 8002a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a20:	f000 ba60 	b.w	8002ee4 <__retarget_lock_init_recursive>
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	bf00      	nop
 8002a28:	08002c45 	.word	0x08002c45
 8002a2c:	08002c67 	.word	0x08002c67
 8002a30:	08002c9f 	.word	0x08002c9f
 8002a34:	08002cc3 	.word	0x08002cc3
 8002a38:	20000138 	.word	0x20000138

08002a3c <stdio_exit_handler>:
 8002a3c:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <stdio_exit_handler+0xc>)
 8002a3e:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <stdio_exit_handler+0x10>)
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <stdio_exit_handler+0x14>)
 8002a42:	f000 b869 	b.w	8002b18 <_fwalk_sglue>
 8002a46:	bf00      	nop
 8002a48:	20000018 	.word	0x20000018
 8002a4c:	08003781 	.word	0x08003781
 8002a50:	20000028 	.word	0x20000028

08002a54 <cleanup_stdio>:
 8002a54:	6841      	ldr	r1, [r0, #4]
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <cleanup_stdio+0x34>)
 8002a58:	4299      	cmp	r1, r3
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	d001      	beq.n	8002a64 <cleanup_stdio+0x10>
 8002a60:	f000 fe8e 	bl	8003780 <_fflush_r>
 8002a64:	68a1      	ldr	r1, [r4, #8]
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <cleanup_stdio+0x38>)
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	d002      	beq.n	8002a72 <cleanup_stdio+0x1e>
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f000 fe87 	bl	8003780 <_fflush_r>
 8002a72:	68e1      	ldr	r1, [r4, #12]
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <cleanup_stdio+0x3c>)
 8002a76:	4299      	cmp	r1, r3
 8002a78:	d004      	beq.n	8002a84 <cleanup_stdio+0x30>
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a80:	f000 be7e 	b.w	8003780 <_fflush_r>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	bf00      	nop
 8002a88:	20000138 	.word	0x20000138
 8002a8c:	200001a0 	.word	0x200001a0
 8002a90:	20000208 	.word	0x20000208

08002a94 <global_stdio_init.part.0>:
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <global_stdio_init.part.0+0x30>)
 8002a98:	4c0b      	ldr	r4, [pc, #44]	@ (8002ac8 <global_stdio_init.part.0+0x34>)
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002acc <global_stdio_init.part.0+0x38>)
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	f7ff ff94 	bl	80029d0 <std>
 8002aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002aac:	2201      	movs	r2, #1
 8002aae:	2109      	movs	r1, #9
 8002ab0:	f7ff ff8e 	bl	80029d0 <std>
 8002ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ab8:	2202      	movs	r2, #2
 8002aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002abe:	2112      	movs	r1, #18
 8002ac0:	f7ff bf86 	b.w	80029d0 <std>
 8002ac4:	20000270 	.word	0x20000270
 8002ac8:	20000138 	.word	0x20000138
 8002acc:	08002a3d 	.word	0x08002a3d

08002ad0 <__sfp_lock_acquire>:
 8002ad0:	4801      	ldr	r0, [pc, #4]	@ (8002ad8 <__sfp_lock_acquire+0x8>)
 8002ad2:	f000 ba08 	b.w	8002ee6 <__retarget_lock_acquire_recursive>
 8002ad6:	bf00      	nop
 8002ad8:	20000279 	.word	0x20000279

08002adc <__sfp_lock_release>:
 8002adc:	4801      	ldr	r0, [pc, #4]	@ (8002ae4 <__sfp_lock_release+0x8>)
 8002ade:	f000 ba03 	b.w	8002ee8 <__retarget_lock_release_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	20000279 	.word	0x20000279

08002ae8 <__sinit>:
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	f7ff fff0 	bl	8002ad0 <__sfp_lock_acquire>
 8002af0:	6a23      	ldr	r3, [r4, #32]
 8002af2:	b11b      	cbz	r3, 8002afc <__sinit+0x14>
 8002af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af8:	f7ff bff0 	b.w	8002adc <__sfp_lock_release>
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__sinit+0x28>)
 8002afe:	6223      	str	r3, [r4, #32]
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__sinit+0x2c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f5      	bne.n	8002af4 <__sinit+0xc>
 8002b08:	f7ff ffc4 	bl	8002a94 <global_stdio_init.part.0>
 8002b0c:	e7f2      	b.n	8002af4 <__sinit+0xc>
 8002b0e:	bf00      	nop
 8002b10:	08002a55 	.word	0x08002a55
 8002b14:	20000270 	.word	0x20000270

08002b18 <_fwalk_sglue>:
 8002b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b1c:	4607      	mov	r7, r0
 8002b1e:	4688      	mov	r8, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	2600      	movs	r6, #0
 8002b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b28:	f1b9 0901 	subs.w	r9, r9, #1
 8002b2c:	d505      	bpl.n	8002b3a <_fwalk_sglue+0x22>
 8002b2e:	6824      	ldr	r4, [r4, #0]
 8002b30:	2c00      	cmp	r4, #0
 8002b32:	d1f7      	bne.n	8002b24 <_fwalk_sglue+0xc>
 8002b34:	4630      	mov	r0, r6
 8002b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b3a:	89ab      	ldrh	r3, [r5, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d907      	bls.n	8002b50 <_fwalk_sglue+0x38>
 8002b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b44:	3301      	adds	r3, #1
 8002b46:	d003      	beq.n	8002b50 <_fwalk_sglue+0x38>
 8002b48:	4629      	mov	r1, r5
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	47c0      	blx	r8
 8002b4e:	4306      	orrs	r6, r0
 8002b50:	3568      	adds	r5, #104	@ 0x68
 8002b52:	e7e9      	b.n	8002b28 <_fwalk_sglue+0x10>

08002b54 <iprintf>:
 8002b54:	b40f      	push	{r0, r1, r2, r3}
 8002b56:	b507      	push	{r0, r1, r2, lr}
 8002b58:	4906      	ldr	r1, [pc, #24]	@ (8002b74 <iprintf+0x20>)
 8002b5a:	ab04      	add	r3, sp, #16
 8002b5c:	6808      	ldr	r0, [r1, #0]
 8002b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b62:	6881      	ldr	r1, [r0, #8]
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	f000 fae3 	bl	8003130 <_vfiprintf_r>
 8002b6a:	b003      	add	sp, #12
 8002b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b70:	b004      	add	sp, #16
 8002b72:	4770      	bx	lr
 8002b74:	20000024 	.word	0x20000024

08002b78 <putchar>:
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <putchar+0xc>)
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	6882      	ldr	r2, [r0, #8]
 8002b80:	f000 be88 	b.w	8003894 <_putc_r>
 8002b84:	20000024 	.word	0x20000024

08002b88 <_puts_r>:
 8002b88:	6a03      	ldr	r3, [r0, #32]
 8002b8a:	b570      	push	{r4, r5, r6, lr}
 8002b8c:	6884      	ldr	r4, [r0, #8]
 8002b8e:	4605      	mov	r5, r0
 8002b90:	460e      	mov	r6, r1
 8002b92:	b90b      	cbnz	r3, 8002b98 <_puts_r+0x10>
 8002b94:	f7ff ffa8 	bl	8002ae8 <__sinit>
 8002b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b9a:	07db      	lsls	r3, r3, #31
 8002b9c:	d405      	bmi.n	8002baa <_puts_r+0x22>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	0598      	lsls	r0, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_puts_r+0x22>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ba6:	f000 f99e 	bl	8002ee6 <__retarget_lock_acquire_recursive>
 8002baa:	89a3      	ldrh	r3, [r4, #12]
 8002bac:	0719      	lsls	r1, r3, #28
 8002bae:	d502      	bpl.n	8002bb6 <_puts_r+0x2e>
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d135      	bne.n	8002c22 <_puts_r+0x9a>
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 f8c5 	bl	8002d48 <__swsetup_r>
 8002bbe:	b380      	cbz	r0, 8002c22 <_puts_r+0x9a>
 8002bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8002bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bc6:	07da      	lsls	r2, r3, #31
 8002bc8:	d405      	bmi.n	8002bd6 <_puts_r+0x4e>
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	059b      	lsls	r3, r3, #22
 8002bce:	d402      	bmi.n	8002bd6 <_puts_r+0x4e>
 8002bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bd2:	f000 f989 	bl	8002ee8 <__retarget_lock_release_recursive>
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	da04      	bge.n	8002be8 <_puts_r+0x60>
 8002bde:	69a2      	ldr	r2, [r4, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dc17      	bgt.n	8002c14 <_puts_r+0x8c>
 8002be4:	290a      	cmp	r1, #10
 8002be6:	d015      	beq.n	8002c14 <_puts_r+0x8c>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6022      	str	r2, [r4, #0]
 8002bee:	7019      	strb	r1, [r3, #0]
 8002bf0:	68a3      	ldr	r3, [r4, #8]
 8002bf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60a3      	str	r3, [r4, #8]
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	d1ed      	bne.n	8002bda <_puts_r+0x52>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da11      	bge.n	8002c26 <_puts_r+0x9e>
 8002c02:	4622      	mov	r2, r4
 8002c04:	210a      	movs	r1, #10
 8002c06:	4628      	mov	r0, r5
 8002c08:	f000 f85f 	bl	8002cca <__swbuf_r>
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d0d7      	beq.n	8002bc0 <_puts_r+0x38>
 8002c10:	250a      	movs	r5, #10
 8002c12:	e7d7      	b.n	8002bc4 <_puts_r+0x3c>
 8002c14:	4622      	mov	r2, r4
 8002c16:	4628      	mov	r0, r5
 8002c18:	f000 f857 	bl	8002cca <__swbuf_r>
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d1e7      	bne.n	8002bf0 <_puts_r+0x68>
 8002c20:	e7ce      	b.n	8002bc0 <_puts_r+0x38>
 8002c22:	3e01      	subs	r6, #1
 8002c24:	e7e4      	b.n	8002bf0 <_puts_r+0x68>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	6022      	str	r2, [r4, #0]
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e7ee      	b.n	8002c10 <_puts_r+0x88>
	...

08002c34 <puts>:
 8002c34:	4b02      	ldr	r3, [pc, #8]	@ (8002c40 <puts+0xc>)
 8002c36:	4601      	mov	r1, r0
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	f7ff bfa5 	b.w	8002b88 <_puts_r>
 8002c3e:	bf00      	nop
 8002c40:	20000024 	.word	0x20000024

08002c44 <__sread>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	460c      	mov	r4, r1
 8002c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4c:	f000 f8fc 	bl	8002e48 <_read_r>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	bfab      	itete	ge
 8002c54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c56:	89a3      	ldrhlt	r3, [r4, #12]
 8002c58:	181b      	addge	r3, r3, r0
 8002c5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c5e:	bfac      	ite	ge
 8002c60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c62:	81a3      	strhlt	r3, [r4, #12]
 8002c64:	bd10      	pop	{r4, pc}

08002c66 <__swrite>:
 8002c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6a:	461f      	mov	r7, r3
 8002c6c:	898b      	ldrh	r3, [r1, #12]
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	4605      	mov	r5, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	4616      	mov	r6, r2
 8002c76:	d505      	bpl.n	8002c84 <__swrite+0x1e>
 8002c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f000 f8d0 	bl	8002e24 <_lseek_r>
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	4632      	mov	r2, r6
 8002c92:	463b      	mov	r3, r7
 8002c94:	4628      	mov	r0, r5
 8002c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9a:	f000 b8e7 	b.w	8002e6c <_write_r>

08002c9e <__sseek>:
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca6:	f000 f8bd 	bl	8002e24 <_lseek_r>
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	bf15      	itete	ne
 8002cb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002cb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002cb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cba:	81a3      	strheq	r3, [r4, #12]
 8002cbc:	bf18      	it	ne
 8002cbe:	81a3      	strhne	r3, [r4, #12]
 8002cc0:	bd10      	pop	{r4, pc}

08002cc2 <__sclose>:
 8002cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc6:	f000 b89d 	b.w	8002e04 <_close_r>

08002cca <__swbuf_r>:
 8002cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ccc:	460e      	mov	r6, r1
 8002cce:	4614      	mov	r4, r2
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	b118      	cbz	r0, 8002cdc <__swbuf_r+0x12>
 8002cd4:	6a03      	ldr	r3, [r0, #32]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <__swbuf_r+0x12>
 8002cd8:	f7ff ff06 	bl	8002ae8 <__sinit>
 8002cdc:	69a3      	ldr	r3, [r4, #24]
 8002cde:	60a3      	str	r3, [r4, #8]
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	071a      	lsls	r2, r3, #28
 8002ce4:	d501      	bpl.n	8002cea <__swbuf_r+0x20>
 8002ce6:	6923      	ldr	r3, [r4, #16]
 8002ce8:	b943      	cbnz	r3, 8002cfc <__swbuf_r+0x32>
 8002cea:	4621      	mov	r1, r4
 8002cec:	4628      	mov	r0, r5
 8002cee:	f000 f82b 	bl	8002d48 <__swsetup_r>
 8002cf2:	b118      	cbz	r0, 8002cfc <__swbuf_r+0x32>
 8002cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	6922      	ldr	r2, [r4, #16]
 8002d00:	1a98      	subs	r0, r3, r2
 8002d02:	6963      	ldr	r3, [r4, #20]
 8002d04:	b2f6      	uxtb	r6, r6
 8002d06:	4283      	cmp	r3, r0
 8002d08:	4637      	mov	r7, r6
 8002d0a:	dc05      	bgt.n	8002d18 <__swbuf_r+0x4e>
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 fd36 	bl	8003780 <_fflush_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d1ed      	bne.n	8002cf4 <__swbuf_r+0x2a>
 8002d18:	68a3      	ldr	r3, [r4, #8]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	60a3      	str	r3, [r4, #8]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	6022      	str	r2, [r4, #0]
 8002d24:	701e      	strb	r6, [r3, #0]
 8002d26:	6962      	ldr	r2, [r4, #20]
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d004      	beq.n	8002d38 <__swbuf_r+0x6e>
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	07db      	lsls	r3, r3, #31
 8002d32:	d5e1      	bpl.n	8002cf8 <__swbuf_r+0x2e>
 8002d34:	2e0a      	cmp	r6, #10
 8002d36:	d1df      	bne.n	8002cf8 <__swbuf_r+0x2e>
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f000 fd20 	bl	8003780 <_fflush_r>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d0d9      	beq.n	8002cf8 <__swbuf_r+0x2e>
 8002d44:	e7d6      	b.n	8002cf4 <__swbuf_r+0x2a>
	...

08002d48 <__swsetup_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <__swsetup_r+0xa8>)
 8002d4c:	4605      	mov	r5, r0
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	460c      	mov	r4, r1
 8002d52:	b118      	cbz	r0, 8002d5c <__swsetup_r+0x14>
 8002d54:	6a03      	ldr	r3, [r0, #32]
 8002d56:	b90b      	cbnz	r3, 8002d5c <__swsetup_r+0x14>
 8002d58:	f7ff fec6 	bl	8002ae8 <__sinit>
 8002d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d60:	0719      	lsls	r1, r3, #28
 8002d62:	d422      	bmi.n	8002daa <__swsetup_r+0x62>
 8002d64:	06da      	lsls	r2, r3, #27
 8002d66:	d407      	bmi.n	8002d78 <__swsetup_r+0x30>
 8002d68:	2209      	movs	r2, #9
 8002d6a:	602a      	str	r2, [r5, #0]
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d70:	81a3      	strh	r3, [r4, #12]
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295
 8002d76:	e033      	b.n	8002de0 <__swsetup_r+0x98>
 8002d78:	0758      	lsls	r0, r3, #29
 8002d7a:	d512      	bpl.n	8002da2 <__swsetup_r+0x5a>
 8002d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d7e:	b141      	cbz	r1, 8002d92 <__swsetup_r+0x4a>
 8002d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d84:	4299      	cmp	r1, r3
 8002d86:	d002      	beq.n	8002d8e <__swsetup_r+0x46>
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f000 f8af 	bl	8002eec <_free_r>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d98:	81a3      	strh	r3, [r4, #12]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	81a3      	strh	r3, [r4, #12]
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	b94b      	cbnz	r3, 8002dc2 <__swsetup_r+0x7a>
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db8:	d003      	beq.n	8002dc2 <__swsetup_r+0x7a>
 8002dba:	4621      	mov	r1, r4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 fd2d 	bl	800381c <__smakebuf_r>
 8002dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc6:	f013 0201 	ands.w	r2, r3, #1
 8002dca:	d00a      	beq.n	8002de2 <__swsetup_r+0x9a>
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60a2      	str	r2, [r4, #8]
 8002dd0:	6962      	ldr	r2, [r4, #20]
 8002dd2:	4252      	negs	r2, r2
 8002dd4:	61a2      	str	r2, [r4, #24]
 8002dd6:	6922      	ldr	r2, [r4, #16]
 8002dd8:	b942      	cbnz	r2, 8002dec <__swsetup_r+0xa4>
 8002dda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002dde:	d1c5      	bne.n	8002d6c <__swsetup_r+0x24>
 8002de0:	bd38      	pop	{r3, r4, r5, pc}
 8002de2:	0799      	lsls	r1, r3, #30
 8002de4:	bf58      	it	pl
 8002de6:	6962      	ldrpl	r2, [r4, #20]
 8002de8:	60a2      	str	r2, [r4, #8]
 8002dea:	e7f4      	b.n	8002dd6 <__swsetup_r+0x8e>
 8002dec:	2000      	movs	r0, #0
 8002dee:	e7f7      	b.n	8002de0 <__swsetup_r+0x98>
 8002df0:	20000024 	.word	0x20000024

08002df4 <memset>:
 8002df4:	4402      	add	r2, r0
 8002df6:	4603      	mov	r3, r0
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memset+0xa>
 8002dfc:	4770      	bx	lr
 8002dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002e02:	e7f9      	b.n	8002df8 <memset+0x4>

08002e04 <_close_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4d06      	ldr	r5, [pc, #24]	@ (8002e20 <_close_r+0x1c>)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	f7fe f803 	bl	8000e1a <_close>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d102      	bne.n	8002e1e <_close_r+0x1a>
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	b103      	cbz	r3, 8002e1e <_close_r+0x1a>
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
 8002e20:	20000274 	.word	0x20000274

08002e24 <_lseek_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4d07      	ldr	r5, [pc, #28]	@ (8002e44 <_lseek_r+0x20>)
 8002e28:	4604      	mov	r4, r0
 8002e2a:	4608      	mov	r0, r1
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	602a      	str	r2, [r5, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f7fe f818 	bl	8000e68 <_lseek>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_lseek_r+0x1e>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_lseek_r+0x1e>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	20000274 	.word	0x20000274

08002e48 <_read_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4d07      	ldr	r5, [pc, #28]	@ (8002e68 <_read_r+0x20>)
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	602a      	str	r2, [r5, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fd ffa6 	bl	8000da8 <_read>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_read_r+0x1e>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_read_r+0x1e>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	20000274 	.word	0x20000274

08002e6c <_write_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d07      	ldr	r5, [pc, #28]	@ (8002e8c <_write_r+0x20>)
 8002e70:	4604      	mov	r4, r0
 8002e72:	4608      	mov	r0, r1
 8002e74:	4611      	mov	r1, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	602a      	str	r2, [r5, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f7fd ffb1 	bl	8000de2 <_write>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_write_r+0x1e>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_write_r+0x1e>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	20000274 	.word	0x20000274

08002e90 <__errno>:
 8002e90:	4b01      	ldr	r3, [pc, #4]	@ (8002e98 <__errno+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000024 	.word	0x20000024

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ed4 <__libc_init_array+0x38>)
 8002ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed8 <__libc_init_array+0x3c>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	4d0b      	ldr	r5, [pc, #44]	@ (8002edc <__libc_init_array+0x40>)
 8002eae:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee0 <__libc_init_array+0x44>)
 8002eb0:	f000 fd56 	bl	8003960 <_init>
 8002eb4:	1b64      	subs	r4, r4, r5
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	2600      	movs	r6, #0
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08003ab0 	.word	0x08003ab0
 8002ed8:	08003ab0 	.word	0x08003ab0
 8002edc:	08003ab0 	.word	0x08003ab0
 8002ee0:	08003ab4 	.word	0x08003ab4

08002ee4 <__retarget_lock_init_recursive>:
 8002ee4:	4770      	bx	lr

08002ee6 <__retarget_lock_acquire_recursive>:
 8002ee6:	4770      	bx	lr

08002ee8 <__retarget_lock_release_recursive>:
 8002ee8:	4770      	bx	lr
	...

08002eec <_free_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4605      	mov	r5, r0
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d041      	beq.n	8002f78 <_free_r+0x8c>
 8002ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef8:	1f0c      	subs	r4, r1, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bfb8      	it	lt
 8002efe:	18e4      	addlt	r4, r4, r3
 8002f00:	f000 f8e0 	bl	80030c4 <__malloc_lock>
 8002f04:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <_free_r+0x90>)
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	b933      	cbnz	r3, 8002f18 <_free_r+0x2c>
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	6014      	str	r4, [r2, #0]
 8002f0e:	4628      	mov	r0, r5
 8002f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f14:	f000 b8dc 	b.w	80030d0 <__malloc_unlock>
 8002f18:	42a3      	cmp	r3, r4
 8002f1a:	d908      	bls.n	8002f2e <_free_r+0x42>
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	1821      	adds	r1, r4, r0
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf01      	itttt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	1809      	addeq	r1, r1, r0
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	e7ed      	b.n	8002f0a <_free_r+0x1e>
 8002f2e:	461a      	mov	r2, r3
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b10b      	cbz	r3, 8002f38 <_free_r+0x4c>
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	d9fa      	bls.n	8002f2e <_free_r+0x42>
 8002f38:	6811      	ldr	r1, [r2, #0]
 8002f3a:	1850      	adds	r0, r2, r1
 8002f3c:	42a0      	cmp	r0, r4
 8002f3e:	d10b      	bne.n	8002f58 <_free_r+0x6c>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	4401      	add	r1, r0
 8002f44:	1850      	adds	r0, r2, r1
 8002f46:	4283      	cmp	r3, r0
 8002f48:	6011      	str	r1, [r2, #0]
 8002f4a:	d1e0      	bne.n	8002f0e <_free_r+0x22>
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	4408      	add	r0, r1
 8002f54:	6010      	str	r0, [r2, #0]
 8002f56:	e7da      	b.n	8002f0e <_free_r+0x22>
 8002f58:	d902      	bls.n	8002f60 <_free_r+0x74>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	602b      	str	r3, [r5, #0]
 8002f5e:	e7d6      	b.n	8002f0e <_free_r+0x22>
 8002f60:	6820      	ldr	r0, [r4, #0]
 8002f62:	1821      	adds	r1, r4, r0
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf04      	itt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	bf04      	itt	eq
 8002f70:	1809      	addeq	r1, r1, r0
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6054      	str	r4, [r2, #4]
 8002f76:	e7ca      	b.n	8002f0e <_free_r+0x22>
 8002f78:	bd38      	pop	{r3, r4, r5, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000280 	.word	0x20000280

08002f80 <sbrk_aligned>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0f      	ldr	r6, [pc, #60]	@ (8002fc0 <sbrk_aligned+0x40>)
 8002f84:	460c      	mov	r4, r1
 8002f86:	6831      	ldr	r1, [r6, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b911      	cbnz	r1, 8002f92 <sbrk_aligned+0x12>
 8002f8c:	f000 fcd8 	bl	8003940 <_sbrk_r>
 8002f90:	6030      	str	r0, [r6, #0]
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fcd3 	bl	8003940 <_sbrk_r>
 8002f9a:	1c43      	adds	r3, r0, #1
 8002f9c:	d103      	bne.n	8002fa6 <sbrk_aligned+0x26>
 8002f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	1cc4      	adds	r4, r0, #3
 8002fa8:	f024 0403 	bic.w	r4, r4, #3
 8002fac:	42a0      	cmp	r0, r4
 8002fae:	d0f8      	beq.n	8002fa2 <sbrk_aligned+0x22>
 8002fb0:	1a21      	subs	r1, r4, r0
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 fcc4 	bl	8003940 <_sbrk_r>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d1f2      	bne.n	8002fa2 <sbrk_aligned+0x22>
 8002fbc:	e7ef      	b.n	8002f9e <sbrk_aligned+0x1e>
 8002fbe:	bf00      	nop
 8002fc0:	2000027c 	.word	0x2000027c

08002fc4 <_malloc_r>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	1ccd      	adds	r5, r1, #3
 8002fca:	f025 0503 	bic.w	r5, r5, #3
 8002fce:	3508      	adds	r5, #8
 8002fd0:	2d0c      	cmp	r5, #12
 8002fd2:	bf38      	it	cc
 8002fd4:	250c      	movcc	r5, #12
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	4606      	mov	r6, r0
 8002fda:	db01      	blt.n	8002fe0 <_malloc_r+0x1c>
 8002fdc:	42a9      	cmp	r1, r5
 8002fde:	d904      	bls.n	8002fea <_malloc_r+0x26>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	6033      	str	r3, [r6, #0]
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030c0 <_malloc_r+0xfc>
 8002fee:	f000 f869 	bl	80030c4 <__malloc_lock>
 8002ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	bb44      	cbnz	r4, 800304c <_malloc_r+0x88>
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f7ff ffbf 	bl	8002f80 <sbrk_aligned>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	4604      	mov	r4, r0
 8003006:	d158      	bne.n	80030ba <_malloc_r+0xf6>
 8003008:	f8d8 4000 	ldr.w	r4, [r8]
 800300c:	4627      	mov	r7, r4
 800300e:	2f00      	cmp	r7, #0
 8003010:	d143      	bne.n	800309a <_malloc_r+0xd6>
 8003012:	2c00      	cmp	r4, #0
 8003014:	d04b      	beq.n	80030ae <_malloc_r+0xea>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	4639      	mov	r1, r7
 800301a:	4630      	mov	r0, r6
 800301c:	eb04 0903 	add.w	r9, r4, r3
 8003020:	f000 fc8e 	bl	8003940 <_sbrk_r>
 8003024:	4581      	cmp	r9, r0
 8003026:	d142      	bne.n	80030ae <_malloc_r+0xea>
 8003028:	6821      	ldr	r1, [r4, #0]
 800302a:	1a6d      	subs	r5, r5, r1
 800302c:	4629      	mov	r1, r5
 800302e:	4630      	mov	r0, r6
 8003030:	f7ff ffa6 	bl	8002f80 <sbrk_aligned>
 8003034:	3001      	adds	r0, #1
 8003036:	d03a      	beq.n	80030ae <_malloc_r+0xea>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	442b      	add	r3, r5
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	f8d8 3000 	ldr.w	r3, [r8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	bb62      	cbnz	r2, 80030a0 <_malloc_r+0xdc>
 8003046:	f8c8 7000 	str.w	r7, [r8]
 800304a:	e00f      	b.n	800306c <_malloc_r+0xa8>
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	1b52      	subs	r2, r2, r5
 8003050:	d420      	bmi.n	8003094 <_malloc_r+0xd0>
 8003052:	2a0b      	cmp	r2, #11
 8003054:	d917      	bls.n	8003086 <_malloc_r+0xc2>
 8003056:	1961      	adds	r1, r4, r5
 8003058:	42a3      	cmp	r3, r4
 800305a:	6025      	str	r5, [r4, #0]
 800305c:	bf18      	it	ne
 800305e:	6059      	strne	r1, [r3, #4]
 8003060:	6863      	ldr	r3, [r4, #4]
 8003062:	bf08      	it	eq
 8003064:	f8c8 1000 	streq.w	r1, [r8]
 8003068:	5162      	str	r2, [r4, r5]
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f82f 	bl	80030d0 <__malloc_unlock>
 8003072:	f104 000b 	add.w	r0, r4, #11
 8003076:	1d23      	adds	r3, r4, #4
 8003078:	f020 0007 	bic.w	r0, r0, #7
 800307c:	1ac2      	subs	r2, r0, r3
 800307e:	bf1c      	itt	ne
 8003080:	1a1b      	subne	r3, r3, r0
 8003082:	50a3      	strne	r3, [r4, r2]
 8003084:	e7af      	b.n	8002fe6 <_malloc_r+0x22>
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	42a3      	cmp	r3, r4
 800308a:	bf0c      	ite	eq
 800308c:	f8c8 2000 	streq.w	r2, [r8]
 8003090:	605a      	strne	r2, [r3, #4]
 8003092:	e7eb      	b.n	800306c <_malloc_r+0xa8>
 8003094:	4623      	mov	r3, r4
 8003096:	6864      	ldr	r4, [r4, #4]
 8003098:	e7ae      	b.n	8002ff8 <_malloc_r+0x34>
 800309a:	463c      	mov	r4, r7
 800309c:	687f      	ldr	r7, [r7, #4]
 800309e:	e7b6      	b.n	800300e <_malloc_r+0x4a>
 80030a0:	461a      	mov	r2, r3
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d1fb      	bne.n	80030a0 <_malloc_r+0xdc>
 80030a8:	2300      	movs	r3, #0
 80030aa:	6053      	str	r3, [r2, #4]
 80030ac:	e7de      	b.n	800306c <_malloc_r+0xa8>
 80030ae:	230c      	movs	r3, #12
 80030b0:	6033      	str	r3, [r6, #0]
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 f80c 	bl	80030d0 <__malloc_unlock>
 80030b8:	e794      	b.n	8002fe4 <_malloc_r+0x20>
 80030ba:	6005      	str	r5, [r0, #0]
 80030bc:	e7d6      	b.n	800306c <_malloc_r+0xa8>
 80030be:	bf00      	nop
 80030c0:	20000280 	.word	0x20000280

080030c4 <__malloc_lock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	@ (80030cc <__malloc_lock+0x8>)
 80030c6:	f7ff bf0e 	b.w	8002ee6 <__retarget_lock_acquire_recursive>
 80030ca:	bf00      	nop
 80030cc:	20000278 	.word	0x20000278

080030d0 <__malloc_unlock>:
 80030d0:	4801      	ldr	r0, [pc, #4]	@ (80030d8 <__malloc_unlock+0x8>)
 80030d2:	f7ff bf09 	b.w	8002ee8 <__retarget_lock_release_recursive>
 80030d6:	bf00      	nop
 80030d8:	20000278 	.word	0x20000278

080030dc <__sfputc_r>:
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	3b01      	subs	r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	b410      	push	{r4}
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	da08      	bge.n	80030fa <__sfputc_r+0x1e>
 80030e8:	6994      	ldr	r4, [r2, #24]
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	db01      	blt.n	80030f2 <__sfputc_r+0x16>
 80030ee:	290a      	cmp	r1, #10
 80030f0:	d103      	bne.n	80030fa <__sfputc_r+0x1e>
 80030f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030f6:	f7ff bde8 	b.w	8002cca <__swbuf_r>
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	1c58      	adds	r0, r3, #1
 80030fe:	6010      	str	r0, [r2, #0]
 8003100:	7019      	strb	r1, [r3, #0]
 8003102:	4608      	mov	r0, r1
 8003104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003108:	4770      	bx	lr

0800310a <__sfputs_r>:
 800310a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310c:	4606      	mov	r6, r0
 800310e:	460f      	mov	r7, r1
 8003110:	4614      	mov	r4, r2
 8003112:	18d5      	adds	r5, r2, r3
 8003114:	42ac      	cmp	r4, r5
 8003116:	d101      	bne.n	800311c <__sfputs_r+0x12>
 8003118:	2000      	movs	r0, #0
 800311a:	e007      	b.n	800312c <__sfputs_r+0x22>
 800311c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003120:	463a      	mov	r2, r7
 8003122:	4630      	mov	r0, r6
 8003124:	f7ff ffda 	bl	80030dc <__sfputc_r>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d1f3      	bne.n	8003114 <__sfputs_r+0xa>
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003130 <_vfiprintf_r>:
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	460d      	mov	r5, r1
 8003136:	b09d      	sub	sp, #116	@ 0x74
 8003138:	4614      	mov	r4, r2
 800313a:	4698      	mov	r8, r3
 800313c:	4606      	mov	r6, r0
 800313e:	b118      	cbz	r0, 8003148 <_vfiprintf_r+0x18>
 8003140:	6a03      	ldr	r3, [r0, #32]
 8003142:	b90b      	cbnz	r3, 8003148 <_vfiprintf_r+0x18>
 8003144:	f7ff fcd0 	bl	8002ae8 <__sinit>
 8003148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800314a:	07d9      	lsls	r1, r3, #31
 800314c:	d405      	bmi.n	800315a <_vfiprintf_r+0x2a>
 800314e:	89ab      	ldrh	r3, [r5, #12]
 8003150:	059a      	lsls	r2, r3, #22
 8003152:	d402      	bmi.n	800315a <_vfiprintf_r+0x2a>
 8003154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003156:	f7ff fec6 	bl	8002ee6 <__retarget_lock_acquire_recursive>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	071b      	lsls	r3, r3, #28
 800315e:	d501      	bpl.n	8003164 <_vfiprintf_r+0x34>
 8003160:	692b      	ldr	r3, [r5, #16]
 8003162:	b99b      	cbnz	r3, 800318c <_vfiprintf_r+0x5c>
 8003164:	4629      	mov	r1, r5
 8003166:	4630      	mov	r0, r6
 8003168:	f7ff fdee 	bl	8002d48 <__swsetup_r>
 800316c:	b170      	cbz	r0, 800318c <_vfiprintf_r+0x5c>
 800316e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003170:	07dc      	lsls	r4, r3, #31
 8003172:	d504      	bpl.n	800317e <_vfiprintf_r+0x4e>
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	b01d      	add	sp, #116	@ 0x74
 800317a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	0598      	lsls	r0, r3, #22
 8003182:	d4f7      	bmi.n	8003174 <_vfiprintf_r+0x44>
 8003184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003186:	f7ff feaf 	bl	8002ee8 <__retarget_lock_release_recursive>
 800318a:	e7f3      	b.n	8003174 <_vfiprintf_r+0x44>
 800318c:	2300      	movs	r3, #0
 800318e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003190:	2320      	movs	r3, #32
 8003192:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003196:	f8cd 800c 	str.w	r8, [sp, #12]
 800319a:	2330      	movs	r3, #48	@ 0x30
 800319c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800334c <_vfiprintf_r+0x21c>
 80031a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031a4:	f04f 0901 	mov.w	r9, #1
 80031a8:	4623      	mov	r3, r4
 80031aa:	469a      	mov	sl, r3
 80031ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b0:	b10a      	cbz	r2, 80031b6 <_vfiprintf_r+0x86>
 80031b2:	2a25      	cmp	r2, #37	@ 0x25
 80031b4:	d1f9      	bne.n	80031aa <_vfiprintf_r+0x7a>
 80031b6:	ebba 0b04 	subs.w	fp, sl, r4
 80031ba:	d00b      	beq.n	80031d4 <_vfiprintf_r+0xa4>
 80031bc:	465b      	mov	r3, fp
 80031be:	4622      	mov	r2, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	4630      	mov	r0, r6
 80031c4:	f7ff ffa1 	bl	800310a <__sfputs_r>
 80031c8:	3001      	adds	r0, #1
 80031ca:	f000 80a7 	beq.w	800331c <_vfiprintf_r+0x1ec>
 80031ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031d0:	445a      	add	r2, fp
 80031d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80031d4:	f89a 3000 	ldrb.w	r3, [sl]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 809f 	beq.w	800331c <_vfiprintf_r+0x1ec>
 80031de:	2300      	movs	r3, #0
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031e8:	f10a 0a01 	add.w	sl, sl, #1
 80031ec:	9304      	str	r3, [sp, #16]
 80031ee:	9307      	str	r3, [sp, #28]
 80031f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80031f6:	4654      	mov	r4, sl
 80031f8:	2205      	movs	r2, #5
 80031fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fe:	4853      	ldr	r0, [pc, #332]	@ (800334c <_vfiprintf_r+0x21c>)
 8003200:	f7fd f806 	bl	8000210 <memchr>
 8003204:	9a04      	ldr	r2, [sp, #16]
 8003206:	b9d8      	cbnz	r0, 8003240 <_vfiprintf_r+0x110>
 8003208:	06d1      	lsls	r1, r2, #27
 800320a:	bf44      	itt	mi
 800320c:	2320      	movmi	r3, #32
 800320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003212:	0713      	lsls	r3, r2, #28
 8003214:	bf44      	itt	mi
 8003216:	232b      	movmi	r3, #43	@ 0x2b
 8003218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800321c:	f89a 3000 	ldrb.w	r3, [sl]
 8003220:	2b2a      	cmp	r3, #42	@ 0x2a
 8003222:	d015      	beq.n	8003250 <_vfiprintf_r+0x120>
 8003224:	9a07      	ldr	r2, [sp, #28]
 8003226:	4654      	mov	r4, sl
 8003228:	2000      	movs	r0, #0
 800322a:	f04f 0c0a 	mov.w	ip, #10
 800322e:	4621      	mov	r1, r4
 8003230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003234:	3b30      	subs	r3, #48	@ 0x30
 8003236:	2b09      	cmp	r3, #9
 8003238:	d94b      	bls.n	80032d2 <_vfiprintf_r+0x1a2>
 800323a:	b1b0      	cbz	r0, 800326a <_vfiprintf_r+0x13a>
 800323c:	9207      	str	r2, [sp, #28]
 800323e:	e014      	b.n	800326a <_vfiprintf_r+0x13a>
 8003240:	eba0 0308 	sub.w	r3, r0, r8
 8003244:	fa09 f303 	lsl.w	r3, r9, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	46a2      	mov	sl, r4
 800324e:	e7d2      	b.n	80031f6 <_vfiprintf_r+0xc6>
 8003250:	9b03      	ldr	r3, [sp, #12]
 8003252:	1d19      	adds	r1, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	9103      	str	r1, [sp, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	bfbb      	ittet	lt
 800325c:	425b      	neglt	r3, r3
 800325e:	f042 0202 	orrlt.w	r2, r2, #2
 8003262:	9307      	strge	r3, [sp, #28]
 8003264:	9307      	strlt	r3, [sp, #28]
 8003266:	bfb8      	it	lt
 8003268:	9204      	strlt	r2, [sp, #16]
 800326a:	7823      	ldrb	r3, [r4, #0]
 800326c:	2b2e      	cmp	r3, #46	@ 0x2e
 800326e:	d10a      	bne.n	8003286 <_vfiprintf_r+0x156>
 8003270:	7863      	ldrb	r3, [r4, #1]
 8003272:	2b2a      	cmp	r3, #42	@ 0x2a
 8003274:	d132      	bne.n	80032dc <_vfiprintf_r+0x1ac>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	1d1a      	adds	r2, r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	9203      	str	r2, [sp, #12]
 800327e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003282:	3402      	adds	r4, #2
 8003284:	9305      	str	r3, [sp, #20]
 8003286:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800335c <_vfiprintf_r+0x22c>
 800328a:	7821      	ldrb	r1, [r4, #0]
 800328c:	2203      	movs	r2, #3
 800328e:	4650      	mov	r0, sl
 8003290:	f7fc ffbe 	bl	8000210 <memchr>
 8003294:	b138      	cbz	r0, 80032a6 <_vfiprintf_r+0x176>
 8003296:	9b04      	ldr	r3, [sp, #16]
 8003298:	eba0 000a 	sub.w	r0, r0, sl
 800329c:	2240      	movs	r2, #64	@ 0x40
 800329e:	4082      	lsls	r2, r0
 80032a0:	4313      	orrs	r3, r2
 80032a2:	3401      	adds	r4, #1
 80032a4:	9304      	str	r3, [sp, #16]
 80032a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032aa:	4829      	ldr	r0, [pc, #164]	@ (8003350 <_vfiprintf_r+0x220>)
 80032ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032b0:	2206      	movs	r2, #6
 80032b2:	f7fc ffad 	bl	8000210 <memchr>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d03f      	beq.n	800333a <_vfiprintf_r+0x20a>
 80032ba:	4b26      	ldr	r3, [pc, #152]	@ (8003354 <_vfiprintf_r+0x224>)
 80032bc:	bb1b      	cbnz	r3, 8003306 <_vfiprintf_r+0x1d6>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	3307      	adds	r3, #7
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	3308      	adds	r3, #8
 80032c8:	9303      	str	r3, [sp, #12]
 80032ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032cc:	443b      	add	r3, r7
 80032ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80032d0:	e76a      	b.n	80031a8 <_vfiprintf_r+0x78>
 80032d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80032d6:	460c      	mov	r4, r1
 80032d8:	2001      	movs	r0, #1
 80032da:	e7a8      	b.n	800322e <_vfiprintf_r+0xfe>
 80032dc:	2300      	movs	r3, #0
 80032de:	3401      	adds	r4, #1
 80032e0:	9305      	str	r3, [sp, #20]
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 0c0a 	mov.w	ip, #10
 80032e8:	4620      	mov	r0, r4
 80032ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ee:	3a30      	subs	r2, #48	@ 0x30
 80032f0:	2a09      	cmp	r2, #9
 80032f2:	d903      	bls.n	80032fc <_vfiprintf_r+0x1cc>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0c6      	beq.n	8003286 <_vfiprintf_r+0x156>
 80032f8:	9105      	str	r1, [sp, #20]
 80032fa:	e7c4      	b.n	8003286 <_vfiprintf_r+0x156>
 80032fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003300:	4604      	mov	r4, r0
 8003302:	2301      	movs	r3, #1
 8003304:	e7f0      	b.n	80032e8 <_vfiprintf_r+0x1b8>
 8003306:	ab03      	add	r3, sp, #12
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	462a      	mov	r2, r5
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <_vfiprintf_r+0x228>)
 800330e:	a904      	add	r1, sp, #16
 8003310:	4630      	mov	r0, r6
 8003312:	f3af 8000 	nop.w
 8003316:	4607      	mov	r7, r0
 8003318:	1c78      	adds	r0, r7, #1
 800331a:	d1d6      	bne.n	80032ca <_vfiprintf_r+0x19a>
 800331c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800331e:	07d9      	lsls	r1, r3, #31
 8003320:	d405      	bmi.n	800332e <_vfiprintf_r+0x1fe>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	059a      	lsls	r2, r3, #22
 8003326:	d402      	bmi.n	800332e <_vfiprintf_r+0x1fe>
 8003328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800332a:	f7ff fddd 	bl	8002ee8 <__retarget_lock_release_recursive>
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	065b      	lsls	r3, r3, #25
 8003332:	f53f af1f 	bmi.w	8003174 <_vfiprintf_r+0x44>
 8003336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003338:	e71e      	b.n	8003178 <_vfiprintf_r+0x48>
 800333a:	ab03      	add	r3, sp, #12
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	462a      	mov	r2, r5
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <_vfiprintf_r+0x228>)
 8003342:	a904      	add	r1, sp, #16
 8003344:	4630      	mov	r0, r6
 8003346:	f000 f879 	bl	800343c <_printf_i>
 800334a:	e7e4      	b.n	8003316 <_vfiprintf_r+0x1e6>
 800334c:	08003a74 	.word	0x08003a74
 8003350:	08003a7e 	.word	0x08003a7e
 8003354:	00000000 	.word	0x00000000
 8003358:	0800310b 	.word	0x0800310b
 800335c:	08003a7a 	.word	0x08003a7a

08003360 <_printf_common>:
 8003360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	4616      	mov	r6, r2
 8003366:	4698      	mov	r8, r3
 8003368:	688a      	ldr	r2, [r1, #8]
 800336a:	690b      	ldr	r3, [r1, #16]
 800336c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003370:	4293      	cmp	r3, r2
 8003372:	bfb8      	it	lt
 8003374:	4613      	movlt	r3, r2
 8003376:	6033      	str	r3, [r6, #0]
 8003378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800337c:	4607      	mov	r7, r0
 800337e:	460c      	mov	r4, r1
 8003380:	b10a      	cbz	r2, 8003386 <_printf_common+0x26>
 8003382:	3301      	adds	r3, #1
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	0699      	lsls	r1, r3, #26
 800338a:	bf42      	ittt	mi
 800338c:	6833      	ldrmi	r3, [r6, #0]
 800338e:	3302      	addmi	r3, #2
 8003390:	6033      	strmi	r3, [r6, #0]
 8003392:	6825      	ldr	r5, [r4, #0]
 8003394:	f015 0506 	ands.w	r5, r5, #6
 8003398:	d106      	bne.n	80033a8 <_printf_common+0x48>
 800339a:	f104 0a19 	add.w	sl, r4, #25
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	6832      	ldr	r2, [r6, #0]
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	42ab      	cmp	r3, r5
 80033a6:	dc26      	bgt.n	80033f6 <_printf_common+0x96>
 80033a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033ac:	6822      	ldr	r2, [r4, #0]
 80033ae:	3b00      	subs	r3, #0
 80033b0:	bf18      	it	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	0692      	lsls	r2, r2, #26
 80033b6:	d42b      	bmi.n	8003410 <_printf_common+0xb0>
 80033b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033bc:	4641      	mov	r1, r8
 80033be:	4638      	mov	r0, r7
 80033c0:	47c8      	blx	r9
 80033c2:	3001      	adds	r0, #1
 80033c4:	d01e      	beq.n	8003404 <_printf_common+0xa4>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	f003 0306 	and.w	r3, r3, #6
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf02      	ittt	eq
 80033d2:	68e5      	ldreq	r5, [r4, #12]
 80033d4:	6833      	ldreq	r3, [r6, #0]
 80033d6:	1aed      	subeq	r5, r5, r3
 80033d8:	68a3      	ldr	r3, [r4, #8]
 80033da:	bf0c      	ite	eq
 80033dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e0:	2500      	movne	r5, #0
 80033e2:	4293      	cmp	r3, r2
 80033e4:	bfc4      	itt	gt
 80033e6:	1a9b      	subgt	r3, r3, r2
 80033e8:	18ed      	addgt	r5, r5, r3
 80033ea:	2600      	movs	r6, #0
 80033ec:	341a      	adds	r4, #26
 80033ee:	42b5      	cmp	r5, r6
 80033f0:	d11a      	bne.n	8003428 <_printf_common+0xc8>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e008      	b.n	8003408 <_printf_common+0xa8>
 80033f6:	2301      	movs	r3, #1
 80033f8:	4652      	mov	r2, sl
 80033fa:	4641      	mov	r1, r8
 80033fc:	4638      	mov	r0, r7
 80033fe:	47c8      	blx	r9
 8003400:	3001      	adds	r0, #1
 8003402:	d103      	bne.n	800340c <_printf_common+0xac>
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340c:	3501      	adds	r5, #1
 800340e:	e7c6      	b.n	800339e <_printf_common+0x3e>
 8003410:	18e1      	adds	r1, r4, r3
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	2030      	movs	r0, #48	@ 0x30
 8003416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800341a:	4422      	add	r2, r4
 800341c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003424:	3302      	adds	r3, #2
 8003426:	e7c7      	b.n	80033b8 <_printf_common+0x58>
 8003428:	2301      	movs	r3, #1
 800342a:	4622      	mov	r2, r4
 800342c:	4641      	mov	r1, r8
 800342e:	4638      	mov	r0, r7
 8003430:	47c8      	blx	r9
 8003432:	3001      	adds	r0, #1
 8003434:	d0e6      	beq.n	8003404 <_printf_common+0xa4>
 8003436:	3601      	adds	r6, #1
 8003438:	e7d9      	b.n	80033ee <_printf_common+0x8e>
	...

0800343c <_printf_i>:
 800343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	7e0f      	ldrb	r7, [r1, #24]
 8003442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003444:	2f78      	cmp	r7, #120	@ 0x78
 8003446:	4691      	mov	r9, r2
 8003448:	4680      	mov	r8, r0
 800344a:	460c      	mov	r4, r1
 800344c:	469a      	mov	sl, r3
 800344e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003452:	d807      	bhi.n	8003464 <_printf_i+0x28>
 8003454:	2f62      	cmp	r7, #98	@ 0x62
 8003456:	d80a      	bhi.n	800346e <_printf_i+0x32>
 8003458:	2f00      	cmp	r7, #0
 800345a:	f000 80d1 	beq.w	8003600 <_printf_i+0x1c4>
 800345e:	2f58      	cmp	r7, #88	@ 0x58
 8003460:	f000 80b8 	beq.w	80035d4 <_printf_i+0x198>
 8003464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800346c:	e03a      	b.n	80034e4 <_printf_i+0xa8>
 800346e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003472:	2b15      	cmp	r3, #21
 8003474:	d8f6      	bhi.n	8003464 <_printf_i+0x28>
 8003476:	a101      	add	r1, pc, #4	@ (adr r1, 800347c <_printf_i+0x40>)
 8003478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800347c:	080034d5 	.word	0x080034d5
 8003480:	080034e9 	.word	0x080034e9
 8003484:	08003465 	.word	0x08003465
 8003488:	08003465 	.word	0x08003465
 800348c:	08003465 	.word	0x08003465
 8003490:	08003465 	.word	0x08003465
 8003494:	080034e9 	.word	0x080034e9
 8003498:	08003465 	.word	0x08003465
 800349c:	08003465 	.word	0x08003465
 80034a0:	08003465 	.word	0x08003465
 80034a4:	08003465 	.word	0x08003465
 80034a8:	080035e7 	.word	0x080035e7
 80034ac:	08003513 	.word	0x08003513
 80034b0:	080035a1 	.word	0x080035a1
 80034b4:	08003465 	.word	0x08003465
 80034b8:	08003465 	.word	0x08003465
 80034bc:	08003609 	.word	0x08003609
 80034c0:	08003465 	.word	0x08003465
 80034c4:	08003513 	.word	0x08003513
 80034c8:	08003465 	.word	0x08003465
 80034cc:	08003465 	.word	0x08003465
 80034d0:	080035a9 	.word	0x080035a9
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6032      	str	r2, [r6, #0]
 80034dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e4:	2301      	movs	r3, #1
 80034e6:	e09c      	b.n	8003622 <_printf_i+0x1e6>
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	1d19      	adds	r1, r3, #4
 80034ee:	6031      	str	r1, [r6, #0]
 80034f0:	0606      	lsls	r6, r0, #24
 80034f2:	d501      	bpl.n	80034f8 <_printf_i+0xbc>
 80034f4:	681d      	ldr	r5, [r3, #0]
 80034f6:	e003      	b.n	8003500 <_printf_i+0xc4>
 80034f8:	0645      	lsls	r5, r0, #25
 80034fa:	d5fb      	bpl.n	80034f4 <_printf_i+0xb8>
 80034fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003500:	2d00      	cmp	r5, #0
 8003502:	da03      	bge.n	800350c <_printf_i+0xd0>
 8003504:	232d      	movs	r3, #45	@ 0x2d
 8003506:	426d      	negs	r5, r5
 8003508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800350c:	4858      	ldr	r0, [pc, #352]	@ (8003670 <_printf_i+0x234>)
 800350e:	230a      	movs	r3, #10
 8003510:	e011      	b.n	8003536 <_printf_i+0xfa>
 8003512:	6821      	ldr	r1, [r4, #0]
 8003514:	6833      	ldr	r3, [r6, #0]
 8003516:	0608      	lsls	r0, r1, #24
 8003518:	f853 5b04 	ldr.w	r5, [r3], #4
 800351c:	d402      	bmi.n	8003524 <_printf_i+0xe8>
 800351e:	0649      	lsls	r1, r1, #25
 8003520:	bf48      	it	mi
 8003522:	b2ad      	uxthmi	r5, r5
 8003524:	2f6f      	cmp	r7, #111	@ 0x6f
 8003526:	4852      	ldr	r0, [pc, #328]	@ (8003670 <_printf_i+0x234>)
 8003528:	6033      	str	r3, [r6, #0]
 800352a:	bf14      	ite	ne
 800352c:	230a      	movne	r3, #10
 800352e:	2308      	moveq	r3, #8
 8003530:	2100      	movs	r1, #0
 8003532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003536:	6866      	ldr	r6, [r4, #4]
 8003538:	60a6      	str	r6, [r4, #8]
 800353a:	2e00      	cmp	r6, #0
 800353c:	db05      	blt.n	800354a <_printf_i+0x10e>
 800353e:	6821      	ldr	r1, [r4, #0]
 8003540:	432e      	orrs	r6, r5
 8003542:	f021 0104 	bic.w	r1, r1, #4
 8003546:	6021      	str	r1, [r4, #0]
 8003548:	d04b      	beq.n	80035e2 <_printf_i+0x1a6>
 800354a:	4616      	mov	r6, r2
 800354c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003550:	fb03 5711 	mls	r7, r3, r1, r5
 8003554:	5dc7      	ldrb	r7, [r0, r7]
 8003556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800355a:	462f      	mov	r7, r5
 800355c:	42bb      	cmp	r3, r7
 800355e:	460d      	mov	r5, r1
 8003560:	d9f4      	bls.n	800354c <_printf_i+0x110>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d10b      	bne.n	800357e <_printf_i+0x142>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	07df      	lsls	r7, r3, #31
 800356a:	d508      	bpl.n	800357e <_printf_i+0x142>
 800356c:	6923      	ldr	r3, [r4, #16]
 800356e:	6861      	ldr	r1, [r4, #4]
 8003570:	4299      	cmp	r1, r3
 8003572:	bfde      	ittt	le
 8003574:	2330      	movle	r3, #48	@ 0x30
 8003576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800357a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800357e:	1b92      	subs	r2, r2, r6
 8003580:	6122      	str	r2, [r4, #16]
 8003582:	f8cd a000 	str.w	sl, [sp]
 8003586:	464b      	mov	r3, r9
 8003588:	aa03      	add	r2, sp, #12
 800358a:	4621      	mov	r1, r4
 800358c:	4640      	mov	r0, r8
 800358e:	f7ff fee7 	bl	8003360 <_printf_common>
 8003592:	3001      	adds	r0, #1
 8003594:	d14a      	bne.n	800362c <_printf_i+0x1f0>
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	b004      	add	sp, #16
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f043 0320 	orr.w	r3, r3, #32
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	4832      	ldr	r0, [pc, #200]	@ (8003674 <_printf_i+0x238>)
 80035aa:	2778      	movs	r7, #120	@ 0x78
 80035ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	6831      	ldr	r1, [r6, #0]
 80035b4:	061f      	lsls	r7, r3, #24
 80035b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80035ba:	d402      	bmi.n	80035c2 <_printf_i+0x186>
 80035bc:	065f      	lsls	r7, r3, #25
 80035be:	bf48      	it	mi
 80035c0:	b2ad      	uxthmi	r5, r5
 80035c2:	6031      	str	r1, [r6, #0]
 80035c4:	07d9      	lsls	r1, r3, #31
 80035c6:	bf44      	itt	mi
 80035c8:	f043 0320 	orrmi.w	r3, r3, #32
 80035cc:	6023      	strmi	r3, [r4, #0]
 80035ce:	b11d      	cbz	r5, 80035d8 <_printf_i+0x19c>
 80035d0:	2310      	movs	r3, #16
 80035d2:	e7ad      	b.n	8003530 <_printf_i+0xf4>
 80035d4:	4826      	ldr	r0, [pc, #152]	@ (8003670 <_printf_i+0x234>)
 80035d6:	e7e9      	b.n	80035ac <_printf_i+0x170>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f023 0320 	bic.w	r3, r3, #32
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	e7f6      	b.n	80035d0 <_printf_i+0x194>
 80035e2:	4616      	mov	r6, r2
 80035e4:	e7bd      	b.n	8003562 <_printf_i+0x126>
 80035e6:	6833      	ldr	r3, [r6, #0]
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	6961      	ldr	r1, [r4, #20]
 80035ec:	1d18      	adds	r0, r3, #4
 80035ee:	6030      	str	r0, [r6, #0]
 80035f0:	062e      	lsls	r6, r5, #24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	d501      	bpl.n	80035fa <_printf_i+0x1be>
 80035f6:	6019      	str	r1, [r3, #0]
 80035f8:	e002      	b.n	8003600 <_printf_i+0x1c4>
 80035fa:	0668      	lsls	r0, r5, #25
 80035fc:	d5fb      	bpl.n	80035f6 <_printf_i+0x1ba>
 80035fe:	8019      	strh	r1, [r3, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	4616      	mov	r6, r2
 8003606:	e7bc      	b.n	8003582 <_printf_i+0x146>
 8003608:	6833      	ldr	r3, [r6, #0]
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	6032      	str	r2, [r6, #0]
 800360e:	681e      	ldr	r6, [r3, #0]
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	2100      	movs	r1, #0
 8003614:	4630      	mov	r0, r6
 8003616:	f7fc fdfb 	bl	8000210 <memchr>
 800361a:	b108      	cbz	r0, 8003620 <_printf_i+0x1e4>
 800361c:	1b80      	subs	r0, r0, r6
 800361e:	6060      	str	r0, [r4, #4]
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	2300      	movs	r3, #0
 8003626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800362a:	e7aa      	b.n	8003582 <_printf_i+0x146>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	4632      	mov	r2, r6
 8003630:	4649      	mov	r1, r9
 8003632:	4640      	mov	r0, r8
 8003634:	47d0      	blx	sl
 8003636:	3001      	adds	r0, #1
 8003638:	d0ad      	beq.n	8003596 <_printf_i+0x15a>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	079b      	lsls	r3, r3, #30
 800363e:	d413      	bmi.n	8003668 <_printf_i+0x22c>
 8003640:	68e0      	ldr	r0, [r4, #12]
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	4298      	cmp	r0, r3
 8003646:	bfb8      	it	lt
 8003648:	4618      	movlt	r0, r3
 800364a:	e7a6      	b.n	800359a <_printf_i+0x15e>
 800364c:	2301      	movs	r3, #1
 800364e:	4632      	mov	r2, r6
 8003650:	4649      	mov	r1, r9
 8003652:	4640      	mov	r0, r8
 8003654:	47d0      	blx	sl
 8003656:	3001      	adds	r0, #1
 8003658:	d09d      	beq.n	8003596 <_printf_i+0x15a>
 800365a:	3501      	adds	r5, #1
 800365c:	68e3      	ldr	r3, [r4, #12]
 800365e:	9903      	ldr	r1, [sp, #12]
 8003660:	1a5b      	subs	r3, r3, r1
 8003662:	42ab      	cmp	r3, r5
 8003664:	dcf2      	bgt.n	800364c <_printf_i+0x210>
 8003666:	e7eb      	b.n	8003640 <_printf_i+0x204>
 8003668:	2500      	movs	r5, #0
 800366a:	f104 0619 	add.w	r6, r4, #25
 800366e:	e7f5      	b.n	800365c <_printf_i+0x220>
 8003670:	08003a85 	.word	0x08003a85
 8003674:	08003a96 	.word	0x08003a96

08003678 <__sflush_r>:
 8003678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003680:	0716      	lsls	r6, r2, #28
 8003682:	4605      	mov	r5, r0
 8003684:	460c      	mov	r4, r1
 8003686:	d454      	bmi.n	8003732 <__sflush_r+0xba>
 8003688:	684b      	ldr	r3, [r1, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dc02      	bgt.n	8003694 <__sflush_r+0x1c>
 800368e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	dd48      	ble.n	8003726 <__sflush_r+0xae>
 8003694:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003696:	2e00      	cmp	r6, #0
 8003698:	d045      	beq.n	8003726 <__sflush_r+0xae>
 800369a:	2300      	movs	r3, #0
 800369c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036a0:	682f      	ldr	r7, [r5, #0]
 80036a2:	6a21      	ldr	r1, [r4, #32]
 80036a4:	602b      	str	r3, [r5, #0]
 80036a6:	d030      	beq.n	800370a <__sflush_r+0x92>
 80036a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	0759      	lsls	r1, r3, #29
 80036ae:	d505      	bpl.n	80036bc <__sflush_r+0x44>
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	1ad2      	subs	r2, r2, r3
 80036b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036b6:	b10b      	cbz	r3, 80036bc <__sflush_r+0x44>
 80036b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036c0:	6a21      	ldr	r1, [r4, #32]
 80036c2:	4628      	mov	r0, r5
 80036c4:	47b0      	blx	r6
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	d106      	bne.n	80036da <__sflush_r+0x62>
 80036cc:	6829      	ldr	r1, [r5, #0]
 80036ce:	291d      	cmp	r1, #29
 80036d0:	d82b      	bhi.n	800372a <__sflush_r+0xb2>
 80036d2:	4a2a      	ldr	r2, [pc, #168]	@ (800377c <__sflush_r+0x104>)
 80036d4:	40ca      	lsrs	r2, r1
 80036d6:	07d6      	lsls	r6, r2, #31
 80036d8:	d527      	bpl.n	800372a <__sflush_r+0xb2>
 80036da:	2200      	movs	r2, #0
 80036dc:	6062      	str	r2, [r4, #4]
 80036de:	04d9      	lsls	r1, r3, #19
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	6022      	str	r2, [r4, #0]
 80036e4:	d504      	bpl.n	80036f0 <__sflush_r+0x78>
 80036e6:	1c42      	adds	r2, r0, #1
 80036e8:	d101      	bne.n	80036ee <__sflush_r+0x76>
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	b903      	cbnz	r3, 80036f0 <__sflush_r+0x78>
 80036ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80036f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036f2:	602f      	str	r7, [r5, #0]
 80036f4:	b1b9      	cbz	r1, 8003726 <__sflush_r+0xae>
 80036f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036fa:	4299      	cmp	r1, r3
 80036fc:	d002      	beq.n	8003704 <__sflush_r+0x8c>
 80036fe:	4628      	mov	r0, r5
 8003700:	f7ff fbf4 	bl	8002eec <_free_r>
 8003704:	2300      	movs	r3, #0
 8003706:	6363      	str	r3, [r4, #52]	@ 0x34
 8003708:	e00d      	b.n	8003726 <__sflush_r+0xae>
 800370a:	2301      	movs	r3, #1
 800370c:	4628      	mov	r0, r5
 800370e:	47b0      	blx	r6
 8003710:	4602      	mov	r2, r0
 8003712:	1c50      	adds	r0, r2, #1
 8003714:	d1c9      	bne.n	80036aa <__sflush_r+0x32>
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0c6      	beq.n	80036aa <__sflush_r+0x32>
 800371c:	2b1d      	cmp	r3, #29
 800371e:	d001      	beq.n	8003724 <__sflush_r+0xac>
 8003720:	2b16      	cmp	r3, #22
 8003722:	d11e      	bne.n	8003762 <__sflush_r+0xea>
 8003724:	602f      	str	r7, [r5, #0]
 8003726:	2000      	movs	r0, #0
 8003728:	e022      	b.n	8003770 <__sflush_r+0xf8>
 800372a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800372e:	b21b      	sxth	r3, r3
 8003730:	e01b      	b.n	800376a <__sflush_r+0xf2>
 8003732:	690f      	ldr	r7, [r1, #16]
 8003734:	2f00      	cmp	r7, #0
 8003736:	d0f6      	beq.n	8003726 <__sflush_r+0xae>
 8003738:	0793      	lsls	r3, r2, #30
 800373a:	680e      	ldr	r6, [r1, #0]
 800373c:	bf08      	it	eq
 800373e:	694b      	ldreq	r3, [r1, #20]
 8003740:	600f      	str	r7, [r1, #0]
 8003742:	bf18      	it	ne
 8003744:	2300      	movne	r3, #0
 8003746:	eba6 0807 	sub.w	r8, r6, r7
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	f1b8 0f00 	cmp.w	r8, #0
 8003750:	dde9      	ble.n	8003726 <__sflush_r+0xae>
 8003752:	6a21      	ldr	r1, [r4, #32]
 8003754:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003756:	4643      	mov	r3, r8
 8003758:	463a      	mov	r2, r7
 800375a:	4628      	mov	r0, r5
 800375c:	47b0      	blx	r6
 800375e:	2800      	cmp	r0, #0
 8003760:	dc08      	bgt.n	8003774 <__sflush_r+0xfc>
 8003762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003774:	4407      	add	r7, r0
 8003776:	eba8 0800 	sub.w	r8, r8, r0
 800377a:	e7e7      	b.n	800374c <__sflush_r+0xd4>
 800377c:	20400001 	.word	0x20400001

08003780 <_fflush_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	690b      	ldr	r3, [r1, #16]
 8003784:	4605      	mov	r5, r0
 8003786:	460c      	mov	r4, r1
 8003788:	b913      	cbnz	r3, 8003790 <_fflush_r+0x10>
 800378a:	2500      	movs	r5, #0
 800378c:	4628      	mov	r0, r5
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	b118      	cbz	r0, 800379a <_fflush_r+0x1a>
 8003792:	6a03      	ldr	r3, [r0, #32]
 8003794:	b90b      	cbnz	r3, 800379a <_fflush_r+0x1a>
 8003796:	f7ff f9a7 	bl	8002ae8 <__sinit>
 800379a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f3      	beq.n	800378a <_fflush_r+0xa>
 80037a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037a4:	07d0      	lsls	r0, r2, #31
 80037a6:	d404      	bmi.n	80037b2 <_fflush_r+0x32>
 80037a8:	0599      	lsls	r1, r3, #22
 80037aa:	d402      	bmi.n	80037b2 <_fflush_r+0x32>
 80037ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ae:	f7ff fb9a 	bl	8002ee6 <__retarget_lock_acquire_recursive>
 80037b2:	4628      	mov	r0, r5
 80037b4:	4621      	mov	r1, r4
 80037b6:	f7ff ff5f 	bl	8003678 <__sflush_r>
 80037ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037bc:	07da      	lsls	r2, r3, #31
 80037be:	4605      	mov	r5, r0
 80037c0:	d4e4      	bmi.n	800378c <_fflush_r+0xc>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	059b      	lsls	r3, r3, #22
 80037c6:	d4e1      	bmi.n	800378c <_fflush_r+0xc>
 80037c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ca:	f7ff fb8d 	bl	8002ee8 <__retarget_lock_release_recursive>
 80037ce:	e7dd      	b.n	800378c <_fflush_r+0xc>

080037d0 <__swhatbuf_r>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	460c      	mov	r4, r1
 80037d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d8:	2900      	cmp	r1, #0
 80037da:	b096      	sub	sp, #88	@ 0x58
 80037dc:	4615      	mov	r5, r2
 80037de:	461e      	mov	r6, r3
 80037e0:	da0d      	bge.n	80037fe <__swhatbuf_r+0x2e>
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	bf14      	ite	ne
 80037ee:	2340      	movne	r3, #64	@ 0x40
 80037f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037f4:	2000      	movs	r0, #0
 80037f6:	6031      	str	r1, [r6, #0]
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	b016      	add	sp, #88	@ 0x58
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	466a      	mov	r2, sp
 8003800:	f000 f87c 	bl	80038fc <_fstat_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	dbec      	blt.n	80037e2 <__swhatbuf_r+0x12>
 8003808:	9901      	ldr	r1, [sp, #4]
 800380a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800380e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003812:	4259      	negs	r1, r3
 8003814:	4159      	adcs	r1, r3
 8003816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800381a:	e7eb      	b.n	80037f4 <__swhatbuf_r+0x24>

0800381c <__smakebuf_r>:
 800381c:	898b      	ldrh	r3, [r1, #12]
 800381e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003820:	079d      	lsls	r5, r3, #30
 8003822:	4606      	mov	r6, r0
 8003824:	460c      	mov	r4, r1
 8003826:	d507      	bpl.n	8003838 <__smakebuf_r+0x1c>
 8003828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	6123      	str	r3, [r4, #16]
 8003830:	2301      	movs	r3, #1
 8003832:	6163      	str	r3, [r4, #20]
 8003834:	b003      	add	sp, #12
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003838:	ab01      	add	r3, sp, #4
 800383a:	466a      	mov	r2, sp
 800383c:	f7ff ffc8 	bl	80037d0 <__swhatbuf_r>
 8003840:	9f00      	ldr	r7, [sp, #0]
 8003842:	4605      	mov	r5, r0
 8003844:	4639      	mov	r1, r7
 8003846:	4630      	mov	r0, r6
 8003848:	f7ff fbbc 	bl	8002fc4 <_malloc_r>
 800384c:	b948      	cbnz	r0, 8003862 <__smakebuf_r+0x46>
 800384e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003852:	059a      	lsls	r2, r3, #22
 8003854:	d4ee      	bmi.n	8003834 <__smakebuf_r+0x18>
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	81a3      	strh	r3, [r4, #12]
 8003860:	e7e2      	b.n	8003828 <__smakebuf_r+0xc>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	6020      	str	r0, [r4, #0]
 8003866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003872:	b15b      	cbz	r3, 800388c <__smakebuf_r+0x70>
 8003874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003878:	4630      	mov	r0, r6
 800387a:	f000 f851 	bl	8003920 <_isatty_r>
 800387e:	b128      	cbz	r0, 800388c <__smakebuf_r+0x70>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	431d      	orrs	r5, r3
 8003890:	81a5      	strh	r5, [r4, #12]
 8003892:	e7cf      	b.n	8003834 <__smakebuf_r+0x18>

08003894 <_putc_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	460d      	mov	r5, r1
 8003898:	4614      	mov	r4, r2
 800389a:	4606      	mov	r6, r0
 800389c:	b118      	cbz	r0, 80038a6 <_putc_r+0x12>
 800389e:	6a03      	ldr	r3, [r0, #32]
 80038a0:	b90b      	cbnz	r3, 80038a6 <_putc_r+0x12>
 80038a2:	f7ff f921 	bl	8002ae8 <__sinit>
 80038a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038a8:	07d8      	lsls	r0, r3, #31
 80038aa:	d405      	bmi.n	80038b8 <_putc_r+0x24>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	0599      	lsls	r1, r3, #22
 80038b0:	d402      	bmi.n	80038b8 <_putc_r+0x24>
 80038b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038b4:	f7ff fb17 	bl	8002ee6 <__retarget_lock_acquire_recursive>
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	60a3      	str	r3, [r4, #8]
 80038c0:	da05      	bge.n	80038ce <_putc_r+0x3a>
 80038c2:	69a2      	ldr	r2, [r4, #24]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	db12      	blt.n	80038ee <_putc_r+0x5a>
 80038c8:	b2eb      	uxtb	r3, r5
 80038ca:	2b0a      	cmp	r3, #10
 80038cc:	d00f      	beq.n	80038ee <_putc_r+0x5a>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	701d      	strb	r5, [r3, #0]
 80038d6:	b2ed      	uxtb	r5, r5
 80038d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038da:	07da      	lsls	r2, r3, #31
 80038dc:	d405      	bmi.n	80038ea <_putc_r+0x56>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	059b      	lsls	r3, r3, #22
 80038e2:	d402      	bmi.n	80038ea <_putc_r+0x56>
 80038e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e6:	f7ff faff 	bl	8002ee8 <__retarget_lock_release_recursive>
 80038ea:	4628      	mov	r0, r5
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	4629      	mov	r1, r5
 80038f0:	4622      	mov	r2, r4
 80038f2:	4630      	mov	r0, r6
 80038f4:	f7ff f9e9 	bl	8002cca <__swbuf_r>
 80038f8:	4605      	mov	r5, r0
 80038fa:	e7ed      	b.n	80038d8 <_putc_r+0x44>

080038fc <_fstat_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4d07      	ldr	r5, [pc, #28]	@ (800391c <_fstat_r+0x20>)
 8003900:	2300      	movs	r3, #0
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	f7fd fa92 	bl	8000e32 <_fstat>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d102      	bne.n	8003918 <_fstat_r+0x1c>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	b103      	cbz	r3, 8003918 <_fstat_r+0x1c>
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	20000274 	.word	0x20000274

08003920 <_isatty_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d06      	ldr	r5, [pc, #24]	@ (800393c <_isatty_r+0x1c>)
 8003924:	2300      	movs	r3, #0
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd fa91 	bl	8000e52 <_isatty>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_isatty_r+0x1a>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_isatty_r+0x1a>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	20000274 	.word	0x20000274

08003940 <_sbrk_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d06      	ldr	r5, [pc, #24]	@ (800395c <_sbrk_r+0x1c>)
 8003944:	2300      	movs	r3, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	f7fd fa9a 	bl	8000e84 <_sbrk>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_sbrk_r+0x1a>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_sbrk_r+0x1a>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	20000274 	.word	0x20000274

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
