
PRJ5_Alimentador_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00004fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003fc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004030  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004030  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42f  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208f  00000000  00000000  000114c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00013558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a13  00000000  00000000  00014278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f44  00000000  00000000  00014c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f672  00000000  00000000  00037bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2379  00000000  00000000  00047241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001195ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  00119600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0011d454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e70 	.word	0x08003e70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003e70 	.word	0x08003e70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HX711_ReadRaw>:
#define TEMPO_AJUSTE 500  // Tempo de ajuste entre as leituras

// --- FUNÇÕES AUXILIARES ---
    // GPIOs já configurados no CubeMX (MX_GPIO_Init já inicializa a célula de carga)

static int32_t HX711_ReadRaw(void) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
    int32_t data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(HX711_DATA_GPIO_Port, HX711_DATA_Pin)); // Aguarda sinal LOW
 80005e6:	bf00      	nop
 80005e8:	2101      	movs	r1, #1
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <HX711_ReadRaw+0x84>)
 80005ec:	f001 f860 	bl	80016b0 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f8      	bne.n	80005e8 <HX711_ReadRaw+0xc>

    for (int i = 0; i < 24; i++) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	e015      	b.n	8000628 <HX711_ReadRaw+0x4c>
        HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2102      	movs	r1, #2
 8000600:	4817      	ldr	r0, [pc, #92]	@ (8000660 <HX711_ReadRaw+0x84>)
 8000602:	f001 f86d 	bl	80016e0 <HAL_GPIO_WritePin>
        data = (data << 1) | HAL_GPIO_ReadPin(HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	005c      	lsls	r4, r3, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4814      	ldr	r0, [pc, #80]	@ (8000660 <HX711_ReadRaw+0x84>)
 800060e:	f001 f84f 	bl	80016b0 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	4323      	orrs	r3, r4
 8000616:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <HX711_ReadRaw+0x84>)
 800061e:	f001 f85f 	bl	80016e0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 24; i++) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b17      	cmp	r3, #23
 800062c:	dde6      	ble.n	80005fc <HX711_ReadRaw+0x20>
    }

    // Ganho 128
    HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HX711_ReadRaw+0x84>)
 8000634:	f001 f854 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <HX711_ReadRaw+0x84>)
 800063e:	f001 f84f 	bl	80016e0 <HAL_GPIO_WritePin>

    if (data & 0x800000) data |= 0xFF000000;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <HX711_ReadRaw+0x78>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000652:	607b      	str	r3, [r7, #4]

    return data;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	40020800 	.word	0x40020800

08000664 <Motor_Init>:

static void Motor_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066e:	4802      	ldr	r0, [pc, #8]	@ (8000678 <Motor_Init+0x14>)
 8000670:	f001 f836 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400

0800067c <Motor_Dispense>:

void Motor_Dispense
(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    // Ativa o motor para abrir a tampa
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000686:	481d      	ldr	r0, [pc, #116]	@ (80006fc <Motor_Dispense+0x80>)
 8000688:	f001 f82a 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000692:	481b      	ldr	r0, [pc, #108]	@ (8000700 <Motor_Dispense+0x84>)
 8000694:	f001 f824 	bl	80016e0 <HAL_GPIO_WritePin>

    HAL_Delay(500); // tempo para abrir a tampa (ajuste conforme necessário)
 8000698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069c:	f000 fd3e 	bl	800111c <HAL_Delay>

    // Para o motor para impedir movimento adicional
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a6:	4815      	ldr	r0, [pc, #84]	@ (80006fc <Motor_Dispense+0x80>)
 80006a8:	f001 f81a 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <Motor_Dispense+0x84>)
 80006b4:	f001 f814 	bl	80016e0 <HAL_GPIO_WritePin>

    // Aguarda um tempo para liberar a ração
    HAL_Delay(1000); // tempo para ração ser liberada (ajuste conforme necessário)
 80006b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006bc:	f000 fd2e 	bl	800111c <HAL_Delay>

    // Ativa o motor para fechar a tampa
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c6:	480d      	ldr	r0, [pc, #52]	@ (80006fc <Motor_Dispense+0x80>)
 80006c8:	f001 f80a 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <Motor_Dispense+0x84>)
 80006d4:	f001 f804 	bl	80016e0 <HAL_GPIO_WritePin>

    HAL_Delay(200); // tempo para fechar a tampa (ajuste conforme necessário)
 80006d8:	20c8      	movs	r0, #200	@ 0xc8
 80006da:	f000 fd1f 	bl	800111c <HAL_Delay>

    // Para o motor
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <Motor_Dispense+0x80>)
 80006e6:	f000 fffb 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Motor_Dispense+0x84>)
 80006f2:	f000 fff5 	bl	80016e0 <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400

08000704 <Motor_Dispense_Disable>:


static void Motor_Dispense_Disable(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DC1_IN1_GPIO_Port, DC1_IN1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <Motor_Dispense_Disable+0x20>)
 8000710:	f000 ffe6 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <Motor_Dispense_Disable+0x24>)
 800071c:	f000 ffe0 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020000 	.word	0x40020000
 8000728:	40020400 	.word	0x40020400

0800072c <App_Init>:


// --- FUNÇÕES PRINCIPAIS ---

void App_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    ST7789_Init();
 8000730:	f000 f860 	bl	80007f4 <ST7789_Init>
    Display_ShowMenu();
 8000734:	f000 f8de 	bl	80008f4 <Display_ShowMenu>
    Motor_Init();
 8000738:	f7ff ff94 	bl	8000664 <Motor_Init>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <App_Run>:

void App_Run(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
    int32_t peso = HX711_ReadRaw();  // Leitura inicial do peso
 8000746:	f7ff ff49 	bl	80005dc <HX711_ReadRaw>
 800074a:	60f8      	str	r0, [r7, #12]
    int32_t pesoAnterior = peso;     // Para verificar variações no peso
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60bb      	str	r3, [r7, #8]
    int32_t pesoDiferenca = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
    uint32_t tempoInicio = HAL_GetTick();  // Marca o tempo de início da operação
 8000754:	f000 fcd6 	bl	8001104 <HAL_GetTick>
 8000758:	6038      	str	r0, [r7, #0]

    Display_ShowMessage("Iniciando...", 0);  // Exibe mensagem inicial no display
 800075a:	2100      	movs	r1, #0
 800075c:	4820      	ldr	r0, [pc, #128]	@ (80007e0 <App_Run+0xa0>)
 800075e:	f000 f8e7 	bl	8000930 <Display_ShowMessage>

    // Loop de dispense até atingir o peso de corte
    while (peso < PESO_CORTE) {
 8000762:	e02d      	b.n	80007c0 <App_Run+0x80>
        Motor_Dispense();  // Ativa o motor para dispensar ração
 8000764:	f7ff ff8a 	bl	800067c <Motor_Dispense>
        HAL_Delay(TEMPO_AJUSTE);  // Aguarda um tempo para estabilizar a leitura
 8000768:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076c:	f000 fcd6 	bl	800111c <HAL_Delay>

        peso = HX711_ReadRaw();  // Lê o peso após o dispense
 8000770:	f7ff ff34 	bl	80005dc <HX711_ReadRaw>
 8000774:	60f8      	str	r0, [r7, #12]

        // Calcula a diferença de peso
        pesoDiferenca = peso - pesoAnterior;
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	607b      	str	r3, [r7, #4]

        // Exibe o peso e o progresso no display
        Display_ShowMessage("Pesando...", 0);
 800077e:	2100      	movs	r1, #0
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <App_Run+0xa4>)
 8000782:	f000 f8d5 	bl	8000930 <Display_ShowMessage>
        Display_ShowProgressBar(peso, PESO_CORTE);
 8000786:	2132      	movs	r1, #50	@ 0x32
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 f8e3 	bl	8000954 <Display_ShowProgressBar>

        // Verifica se a diferença de peso é muito pequena
        if (pesoDiferenca < 1) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	dc03      	bgt.n	800079c <App_Run+0x5c>
            Display_ShowMessage("Peso está estável", 1);  // Feedback se o peso não mudar
 8000794:	2101      	movs	r1, #1
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <App_Run+0xa8>)
 8000798:	f000 f8ca 	bl	8000930 <Display_ShowMessage>
        }

        // Verifica o tempo máximo de dispense, caso queira evitar loops infinitos
        if (HAL_GetTick() - tempoInicio > 30000) {  // Exemplo de timeout de 30 segundos
 800079c:	f000 fcb2 	bl	8001104 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d906      	bls.n	80007bc <App_Run+0x7c>
            Display_ShowMessage("Tempo excedido!", 1);  // Exibe erro se o tempo foi excedido
 80007ae:	2101      	movs	r1, #1
 80007b0:	480e      	ldr	r0, [pc, #56]	@ (80007ec <App_Run+0xac>)
 80007b2:	f000 f8bd 	bl	8000930 <Display_ShowMessage>
            Motor_Dispense_Disable();  // Desliga o motor em caso de erro
 80007b6:	f7ff ffa5 	bl	8000704 <Motor_Dispense_Disable>
            return;  // Sai da função
 80007ba:	e00e      	b.n	80007da <App_Run+0x9a>
        }

        // Atualiza a variável pesoAnterior para a próxima comparação
        pesoAnterior = peso;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	60bb      	str	r3, [r7, #8]
    while (peso < PESO_CORTE) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b31      	cmp	r3, #49	@ 0x31
 80007c4:	ddce      	ble.n	8000764 <App_Run+0x24>
    }

    // Quando atingir o peso de corte, desliga o motor
    Motor_Dispense_Disable();
 80007c6:	f7ff ff9d 	bl	8000704 <Motor_Dispense_Disable>

    // Feedback visual de sucesso
    Display_ShowMessage("Peso alcançado!", 0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <App_Run+0xb0>)
 80007ce:	f000 f8af 	bl	8000930 <Display_ShowMessage>

    // Pode adicionar uma pausa antes de finalizar ou reiniciar
    HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d6:	f000 fca1 	bl	800111c <HAL_Delay>
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08003e88 	.word	0x08003e88
 80007e4:	08003e98 	.word	0x08003e98
 80007e8:	08003ea4 	.word	0x08003ea4
 80007ec:	08003eb8 	.word	0x08003eb8
 80007f0:	08003ec8 	.word	0x08003ec8

080007f4 <ST7789_Init>:
#define ST7789_CS_PIN        GPIO_PIN_7  // PB7

extern SPI_HandleTypeDef hspi1;  // SPI1, configurado no CubeMX ou manualmente

// Função de inicialização do ST7789
void ST7789_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    // Reset do display
    HAL_GPIO_WritePin(GPIOA, ST7789_RESET_PIN, GPIO_PIN_RESET);  // Reseta o display
 80007f8:	2200      	movs	r2, #0
 80007fa:	2110      	movs	r1, #16
 80007fc:	4816      	ldr	r0, [pc, #88]	@ (8000858 <ST7789_Init+0x64>)
 80007fe:	f000 ff6f 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // Tempo de reset
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f000 fc8a 	bl	800111c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, ST7789_RESET_PIN, GPIO_PIN_SET);    // Finaliza o reset
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <ST7789_Init+0x64>)
 800080e:	f000 ff67 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_Delay(150);  // Aguarda o display iniciar após reset
 8000812:	2096      	movs	r0, #150	@ 0x96
 8000814:	f000 fc82 	bl	800111c <HAL_Delay>

    // Configurações iniciais do display
    ST7789_WriteCommand(0x01);  // Software Reset
 8000818:	2001      	movs	r0, #1
 800081a:	f000 f81f 	bl	800085c <ST7789_WriteCommand>
    HAL_Delay(150);  // Aguardar reset
 800081e:	2096      	movs	r0, #150	@ 0x96
 8000820:	f000 fc7c 	bl	800111c <HAL_Delay>

    ST7789_WriteCommand(0x11);  // Sleep Out
 8000824:	2011      	movs	r0, #17
 8000826:	f000 f819 	bl	800085c <ST7789_WriteCommand>
    HAL_Delay(255);  // Aguardar wake-up do display
 800082a:	20ff      	movs	r0, #255	@ 0xff
 800082c:	f000 fc76 	bl	800111c <HAL_Delay>

    ST7789_WriteCommand(0x36);  // Memory Data Access Control
 8000830:	2036      	movs	r0, #54	@ 0x36
 8000832:	f000 f813 	bl	800085c <ST7789_WriteCommand>
    ST7789_WriteData(0x00);     // Definir a orientação para landscape (se necessário)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f836 	bl	80008a8 <ST7789_WriteData>

    ST7789_WriteCommand(0x3A);  // Interface Pixel Format
 800083c:	203a      	movs	r0, #58	@ 0x3a
 800083e:	f000 f80d 	bl	800085c <ST7789_WriteCommand>
    ST7789_WriteData(0x55);     // 16 bits por pixel
 8000842:	2055      	movs	r0, #85	@ 0x55
 8000844:	f000 f830 	bl	80008a8 <ST7789_WriteData>

    // (Comandos de configuração adicionais seguem conforme necessário)

    ST7789_WriteCommand(0x29);  // Display ON
 8000848:	2029      	movs	r0, #41	@ 0x29
 800084a:	f000 f807 	bl	800085c <ST7789_WriteCommand>
    HAL_Delay(50);  // Aguardar um pouco após ativar o display
 800084e:	2032      	movs	r0, #50	@ 0x32
 8000850:	f000 fc64 	bl	800111c <HAL_Delay>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40020000 	.word	0x40020000

0800085c <ST7789_WriteCommand>:

// Função auxiliar para enviar um comando para o display
void ST7789_WriteCommand(uint8_t cmd) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, ST7789_DC_PIN, GPIO_PIN_RESET);  // DC = 0 para comando
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	480c      	ldr	r0, [pc, #48]	@ (800089c <ST7789_WriteCommand+0x40>)
 800086c:	f000 ff38 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, ST7789_CS_PIN, GPIO_PIN_RESET);  // Chip select baixo
 8000870:	2200      	movs	r2, #0
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <ST7789_WriteCommand+0x44>)
 8000876:	f000 ff33 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);         // Envia comando via SPI
 800087a:	1df9      	adds	r1, r7, #7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <ST7789_WriteCommand+0x48>)
 8000884:	f001 fcfd 	bl	8002282 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, ST7789_CS_PIN, GPIO_PIN_SET);    // Chip select alto
 8000888:	2201      	movs	r2, #1
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <ST7789_WriteCommand+0x44>)
 800088e:	f000 ff27 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	20000084 	.word	0x20000084

080008a8 <ST7789_WriteData>:

// Função auxiliar para enviar dados para o display
void ST7789_WriteData(uint8_t data) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, ST7789_DC_PIN, GPIO_PIN_SET);  // DC = 1 para dados
 80008b2:	2201      	movs	r2, #1
 80008b4:	2120      	movs	r1, #32
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <ST7789_WriteData+0x40>)
 80008b8:	f000 ff12 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, ST7789_CS_PIN, GPIO_PIN_RESET);  // Chip select baixo
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	480a      	ldr	r0, [pc, #40]	@ (80008ec <ST7789_WriteData+0x44>)
 80008c2:	f000 ff0d 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);         // Envia dados via SPI
 80008c6:	1df9      	adds	r1, r7, #7
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	2201      	movs	r2, #1
 80008ce:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <ST7789_WriteData+0x48>)
 80008d0:	f001 fcd7 	bl	8002282 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, ST7789_CS_PIN, GPIO_PIN_SET);    // Chip select alto
 80008d4:	2201      	movs	r2, #1
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <ST7789_WriteData+0x44>)
 80008da:	f000 ff01 	bl	80016e0 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	20000084 	.word	0x20000084

080008f4 <Display_ShowMenu>:
void Display_Print(const char *str) {
    printf("%s\n", str);  // Simula a impressão no console
}

// Função para mostrar o menu no display (simulação)
void Display_ShowMenu(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    printf("\n=== Menu Principal ===\n");
 80008f8:	4808      	ldr	r0, [pc, #32]	@ (800091c <Display_ShowMenu+0x28>)
 80008fa:	f002 fc23 	bl	8003144 <puts>
    printf("1. Servir ração\n");
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <Display_ShowMenu+0x2c>)
 8000900:	f002 fc20 	bl	8003144 <puts>
    printf("2. Configurar horário\n");
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <Display_ShowMenu+0x30>)
 8000906:	f002 fc1d 	bl	8003144 <puts>
    printf("3. Sair\n");
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <Display_ShowMenu+0x34>)
 800090c:	f002 fc1a 	bl	8003144 <puts>
    printf("======================\n");
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <Display_ShowMenu+0x38>)
 8000912:	f002 fc17 	bl	8003144 <puts>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08003edc 	.word	0x08003edc
 8000920:	08003ef4 	.word	0x08003ef4
 8000924:	08003f08 	.word	0x08003f08
 8000928:	08003f20 	.word	0x08003f20
 800092c:	08003f28 	.word	0x08003f28

08000930 <Display_ShowMessage>:

// Função para exibir uma mensagem no display (simulação)
void Display_ShowMessage(const char *msg, uint8_t linha) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
    printf("Mensagem linha %d: %s\n", linha, msg);
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4619      	mov	r1, r3
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <Display_ShowMessage+0x20>)
 8000944:	f002 fb8e 	bl	8003064 <iprintf>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08003f40 	.word	0x08003f40

08000954 <Display_ShowProgressBar>:

// Função para exibir uma barra de progresso no display (simulação)
void Display_ShowProgressBar(int32_t valorAtual, int32_t valorMaximo) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    int32_t progresso = (valorAtual * 100) / valorMaximo;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2264      	movs	r2, #100	@ 0x64
 8000962:	fb03 f202 	mul.w	r2, r3, r2
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	fb92 f3f3 	sdiv	r3, r2, r3
 800096c:	60fb      	str	r3, [r7, #12]
    if (progresso > 100) progresso = 100;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b64      	cmp	r3, #100	@ 0x64
 8000972:	dd01      	ble.n	8000978 <Display_ShowProgressBar+0x24>
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	60fb      	str	r3, [r7, #12]

    printf("Progresso: [");
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <Display_ShowProgressBar+0x6c>)
 800097a:	f002 fb73 	bl	8003064 <iprintf>
    for (int i = 0; i < 50; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	e011      	b.n	80009a8 <Display_ShowProgressBar+0x54>
        if (i < progresso / 2) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0fda      	lsrs	r2, r3, #31
 8000988:	4413      	add	r3, r2
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	461a      	mov	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4293      	cmp	r3, r2
 8000992:	da03      	bge.n	800099c <Display_ShowProgressBar+0x48>
            printf("=");
 8000994:	203d      	movs	r0, #61	@ 0x3d
 8000996:	f002 fb77 	bl	8003088 <putchar>
 800099a:	e002      	b.n	80009a2 <Display_ShowProgressBar+0x4e>
        } else {
            printf(" ");
 800099c:	2020      	movs	r0, #32
 800099e:	f002 fb73 	bl	8003088 <putchar>
    for (int i = 0; i < 50; i++) {
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b31      	cmp	r3, #49	@ 0x31
 80009ac:	ddea      	ble.n	8000984 <Display_ShowProgressBar+0x30>
        }
    }
    printf("] %ld%%\n", progresso);  // Usando %ld para int32_t
 80009ae:	68f9      	ldr	r1, [r7, #12]
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <Display_ShowProgressBar+0x70>)
 80009b2:	f002 fb57 	bl	8003064 <iprintf>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08003f58 	.word	0x08003f58
 80009c4:	08003f68 	.word	0x08003f68

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fb34 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f80c 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 f8ea 	bl	8000bac <MX_GPIO_Init>
  MX_TIM2_Init();
 80009d8:	f000 f89c 	bl	8000b14 <MX_TIM2_Init>
  MX_SPI1_Init();
 80009dc:	f000 f864 	bl	8000aa8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80009e0:	f7ff fea4 	bl	800072c <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Run();
 80009e4:	f7ff feac 	bl	8000740 <App_Run>
 80009e8:	e7fc      	b.n	80009e4 <main+0x1c>
	...

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2234      	movs	r2, #52	@ 0x34
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fc82 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <SystemClock_Config+0xb4>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <SystemClock_Config+0xb4>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <SystemClock_Config+0xb4>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <SystemClock_Config+0xb8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a38:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa4 <SystemClock_Config+0xb8>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <SystemClock_Config+0xb8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f8e8 	bl	8001c34 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a6a:	f000 f92f 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fe43 	bl	8001714 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a94:	f000 f91a 	bl	8000ccc <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	@ 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000aae:	4a18      	ldr	r2, [pc, #96]	@ (8000b10 <MX_SPI1_Init+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000af4:	220a      	movs	r2, #10
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI1_Init+0x64>)
 8000afa:	f001 fb39 	bl	8002170 <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b04:	f000 f8e2 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25-1;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b3a:	2218      	movs	r2, #24
 8000b3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b46:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b5a:	f001 fdb3 	bl	80026c4 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b64:	f000 f8b2 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b76:	f001 fee4 	bl	8002942 <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b80:	f000 f8a4 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_TIM2_Init+0x94>)
 8000b92:	f002 f915 	bl	8002dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f896 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000dc 	.word	0x200000dc

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a3c      	ldr	r2, [pc, #240]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b36      	ldr	r3, [pc, #216]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a35      	ldr	r2, [pc, #212]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b33      	ldr	r3, [pc, #204]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a2e      	ldr	r2, [pc, #184]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a27      	ldr	r2, [pc, #156]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <MX_GPIO_Init+0x110>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RES_DSP_Pin|DC_DSP_Pin|BLK_DSP_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2170      	movs	r1, #112	@ 0x70
 8000c36:	4822      	ldr	r0, [pc, #136]	@ (8000cc0 <MX_GPIO_Init+0x114>)
 8000c38:	f000 fd52 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC1_IN2_GPIO_Port, DC1_IN2_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	4820      	ldr	r0, [pc, #128]	@ (8000cc4 <MX_GPIO_Init+0x118>)
 8000c44:	f000 fd4c 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LOAD_DATA_Pin LOAD_CLK_Pin FAULT_Pin */
  GPIO_InitStruct.Pin = LOAD_DATA_Pin|LOAD_CLK_Pin|FAULT_Pin;
 8000c48:	2323      	movs	r3, #35	@ 0x23
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481b      	ldr	r0, [pc, #108]	@ (8000cc8 <MX_GPIO_Init+0x11c>)
 8000c5c:	f000 fb94 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_DSP_Pin DC_DSP_Pin BLK_DSP_Pin */
  GPIO_InitStruct.Pin = RES_DSP_Pin|DC_DSP_Pin|BLK_DSP_Pin;
 8000c60:	2370      	movs	r3, #112	@ 0x70
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <MX_GPIO_Init+0x114>)
 8000c78:	f000 fb86 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC1_IN2_Pin */
  GPIO_InitStruct.Pin = DC1_IN2_Pin;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC1_IN2_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <MX_GPIO_Init+0x118>)
 8000c96:	f000 fb77 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC1_IN1_Pin */
  GPIO_InitStruct.Pin = DC1_IN1_Pin;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DC1_IN1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_GPIO_Init+0x114>)
 8000cb0:	f000 fb6a 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	40020800 	.word	0x40020800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	@ (8000dac <HAL_SPI_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|MOSI_DSP_Pin;
 8000d82:	2328      	movs	r3, #40	@ 0x28
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	f000 faf3 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40013000 	.word	0x40013000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dc8:	d115      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_TIM_Base_MspInit+0x48>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e00 <HAL_TIM_Base_MspInit+0x48>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_TIM_Base_MspInit+0x48>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	201c      	movs	r0, #28
 8000dec:	f000 fa95 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 faae 	bl	8001352 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f93f 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM2_IRQHandler+0x10>)
 8000e6a:	f001 fc7a 	bl	8002762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000dc 	.word	0x200000dc

08000e78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
  }

  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e009      	b.n	8000ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf1      	blt.n	8000ec4 <_write+0x12>
  }
  return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f002 fa0c 	bl	80033a0 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20020000 	.word	0x20020000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000124 	.word	0x20000124
 8000fbc:	20000278 	.word	0x20000278

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 f9cb 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fcd7 	bl	80009c8 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001028:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 800102c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001030:	20000278 	.word	0x20000278

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f94f 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe34 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f967 	bl	800136e <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f92f 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000128 	.word	0x20000128

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000128 	.word	0x20000128

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff3e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e165      	b.n	8001670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8154 	bne.w	800166a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80ae 	beq.w	800166a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b5d      	ldr	r3, [pc, #372]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b5a      	ldr	r3, [pc, #360]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a58      	ldr	r2, [pc, #352]	@ (800168c <HAL_GPIO_Init+0x304>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4f      	ldr	r2, [pc, #316]	@ (8001690 <HAL_GPIO_Init+0x308>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x21a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <HAL_GPIO_Init+0x30c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x216>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <HAL_GPIO_Init+0x310>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x212>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <HAL_GPIO_Init+0x314>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	@ (80016a0 <HAL_GPIO_Init+0x318>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x20a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4a      	ldr	r2, [pc, #296]	@ (80016a4 <HAL_GPIO_Init+0x31c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x206>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	@ (80016a8 <HAL_GPIO_Init+0x320>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x202>
 8001586:	2306      	movs	r3, #6
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 800158a:	2307      	movs	r3, #7
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x21c>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	@ (800168c <HAL_GPIO_Init+0x304>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <HAL_GPIO_Init+0x324>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a31      	ldr	r2, [pc, #196]	@ (80016ac <HAL_GPIO_Init+0x324>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <HAL_GPIO_Init+0x324>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a26      	ldr	r2, [pc, #152]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_GPIO_Init+0x324>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a11      	ldr	r2, [pc, #68]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae96 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0cc      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b68      	ldr	r3, [pc, #416]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4934      	ldr	r1, [pc, #208]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fc7e 	bl	8001104 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fc7a 	bl	8001104 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fbde 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	08003f74 	.word	0x08003f74
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b0a6      	sub	sp, #152	@ 0x98
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001906:	4bc8      	ldr	r3, [pc, #800]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b0c      	cmp	r3, #12
 8001910:	f200 817e 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x330>
 8001914:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001951 	.word	0x08001951
 8001920:	08001c11 	.word	0x08001c11
 8001924:	08001c11 	.word	0x08001c11
 8001928:	08001c11 	.word	0x08001c11
 800192c:	08001959 	.word	0x08001959
 8001930:	08001c11 	.word	0x08001c11
 8001934:	08001c11 	.word	0x08001c11
 8001938:	08001c11 	.word	0x08001c11
 800193c:	08001961 	.word	0x08001961
 8001940:	08001c11 	.word	0x08001c11
 8001944:	08001c11 	.word	0x08001c11
 8001948:	08001c11 	.word	0x08001c11
 800194c:	08001acb 	.word	0x08001acb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4bb6      	ldr	r3, [pc, #728]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001956:	e15f      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4bb5      	ldr	r3, [pc, #724]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x350>)
 800195a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800195e:	e15b      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4bb1      	ldr	r3, [pc, #708]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196c:	4bae      	ldr	r3, [pc, #696]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d031      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001978:	4bab      	ldr	r3, [pc, #684]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	2200      	movs	r2, #0
 8001980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198a:	663b      	str	r3, [r7, #96]	@ 0x60
 800198c:	2300      	movs	r3, #0
 800198e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001990:	4ba7      	ldr	r3, [pc, #668]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x350>)
 8001992:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001996:	462a      	mov	r2, r5
 8001998:	fb03 f202 	mul.w	r2, r3, r2
 800199c:	2300      	movs	r3, #0
 800199e:	4621      	mov	r1, r4
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	4aa2      	ldr	r2, [pc, #648]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x350>)
 80019a8:	4621      	mov	r1, r4
 80019aa:	fba1 1202 	umull	r1, r2, r1, r2
 80019ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80019b0:	460a      	mov	r2, r1
 80019b2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80019b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019b6:	4413      	add	r3, r2
 80019b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019be:	2200      	movs	r2, #0
 80019c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80019cc:	f7fe fc70 	bl	80002b0 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019da:	e064      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4b92      	ldr	r3, [pc, #584]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	2200      	movs	r2, #0
 80019e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80019e6:	657a      	str	r2, [r7, #84]	@ 0x54
 80019e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019f0:	2300      	movs	r3, #0
 80019f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80019f8:	4622      	mov	r2, r4
 80019fa:	462b      	mov	r3, r5
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0159      	lsls	r1, r3, #5
 8001a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0a:	0150      	lsls	r0, r2, #5
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4621      	mov	r1, r4
 8001a12:	1a51      	subs	r1, r2, r1
 8001a14:	6139      	str	r1, [r7, #16]
 8001a16:	4629      	mov	r1, r5
 8001a18:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a2a:	4659      	mov	r1, fp
 8001a2c:	018b      	lsls	r3, r1, #6
 8001a2e:	4651      	mov	r1, sl
 8001a30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a34:	4651      	mov	r1, sl
 8001a36:	018a      	lsls	r2, r1, #6
 8001a38:	4651      	mov	r1, sl
 8001a3a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3e:	4659      	mov	r1, fp
 8001a40:	eb63 0901 	sbc.w	r9, r3, r1
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a58:	4690      	mov	r8, r2
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	eb18 0303 	adds.w	r3, r8, r3
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	462b      	mov	r3, r5
 8001a66:	eb49 0303 	adc.w	r3, r9, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a78:	4629      	mov	r1, r5
 8001a7a:	028b      	lsls	r3, r1, #10
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a82:	4621      	mov	r1, r4
 8001a84:	028a      	lsls	r2, r1, #10
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a92:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a98:	f7fe fc0a 	bl	80002b0 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001ab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ac8:	e0a6      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b54      	ldr	r3, [pc, #336]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d02a      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b51      	ldr	r3, [pc, #324]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001af4:	2100      	movs	r1, #0
 8001af6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x350>)
 8001af8:	fb03 f201 	mul.w	r2, r3, r1
 8001afc:	2300      	movs	r3, #0
 8001afe:	fb00 f303 	mul.w	r3, r0, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	4a4a      	ldr	r2, [pc, #296]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b06:	fba0 1202 	umull	r1, r2, r0, r2
 8001b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b10:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b12:	4413      	add	r3, r2
 8001b14:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b28:	f7fe fbc2 	bl	80002b0 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b36:	e05b      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b38:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b54:	4642      	mov	r2, r8
 8001b56:	464b      	mov	r3, r9
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0159      	lsls	r1, r3, #5
 8001b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b66:	0150      	lsls	r0, r2, #5
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b72:	4649      	mov	r1, r9
 8001b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b90:	eb63 050b 	sbc.w	r5, r3, fp
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	00eb      	lsls	r3, r5, #3
 8001b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba2:	00e2      	lsls	r2, r4, #3
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	4643      	mov	r3, r8
 8001baa:	18e3      	adds	r3, r4, r3
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	464b      	mov	r3, r9
 8001bb0:	eb45 0303 	adc.w	r3, r5, r3
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	028b      	lsls	r3, r1, #10
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bcc:	4621      	mov	r1, r4
 8001bce:	028a      	lsls	r2, r1, #10
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	61fa      	str	r2, [r7, #28]
 8001bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be2:	f7fe fb65 	bl	80002b0 <__aeabi_uldivmod>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4613      	mov	r3, r2
 8001bec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0f1b      	lsrs	r3, r3, #28
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c0e:	e003      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3798      	adds	r7, #152	@ 0x98
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	017d7840 	.word	0x017d7840

08001c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e28d      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8083 	beq.w	8001d5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c54:	4b94      	ldr	r3, [pc, #592]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c60:	4b91      	ldr	r3, [pc, #580]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4b84      	ldr	r3, [pc, #528]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x124>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d157      	bne.n	8001d58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e25a      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x90>
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7b      	ldr	r2, [pc, #492]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xcc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xb4>
 8001cce:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b73      	ldr	r3, [pc, #460]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a72      	ldr	r2, [pc, #456]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xcc>
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f9fc 	bl	8001104 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f9f8 	bl	8001104 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e21f      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b61      	ldr	r3, [pc, #388]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xdc>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f9e8 	bl	8001104 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff f9e4 	bl	8001104 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e20b      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x104>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d06f      	beq.n	8001e46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d66:	4b50      	ldr	r3, [pc, #320]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d017      	beq.n	8001da2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b41      	ldr	r3, [pc, #260]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x186>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1d3      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4937      	ldr	r1, [pc, #220]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_OscConfig+0x278>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f991 	bl	8001104 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff f98d 	bl	8001104 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1b4      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4925      	ldr	r1, [pc, #148]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x278>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f970 	bl	8001104 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff f96c 	bl	8001104 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e193      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f950 	bl	8001104 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff f94c 	bl	8001104 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e173      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x234>
 8001e86:	e01b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f939 	bl	8001104 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	e00e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f935 	bl	8001104 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d907      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e15c      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470000 	.word	0x42470000
 8001eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ea      	bne.n	8001e96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8097 	beq.w	8001ffc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b83      	ldr	r3, [pc, #524]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b7c      	ldr	r3, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b79      	ldr	r3, [pc, #484]	@ (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b76      	ldr	r3, [pc, #472]	@ (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	@ (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff f8f5 	bl	8001104 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff f8f1 	bl	8001104 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e118      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b6c      	ldr	r3, [pc, #432]	@ (80020e4 <HAL_RCC_OscConfig+0x4b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x31e>
 8001f44:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	4a65      	ldr	r2, [pc, #404]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f50:	e01c      	b.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x340>
 8001f5a:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	4a60      	ldr	r2, [pc, #384]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f66:	4b5e      	ldr	r3, [pc, #376]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f74:	4b5a      	ldr	r3, [pc, #360]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f78:	4a59      	ldr	r2, [pc, #356]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f80:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a56      	ldr	r2, [pc, #344]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f8b6 	bl	8001104 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f8b2 	bl	8001104 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0d7      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ee      	beq.n	8001f9c <HAL_RCC_OscConfig+0x368>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f8a0 	bl	8001104 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f89c 	bl	8001104 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0c1      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ee      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80ad 	beq.w	8002160 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002006:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d060      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d145      	bne.n	80020a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f870 	bl	8001104 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f86c 	bl	8001104 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e093      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b29      	ldr	r3, [pc, #164]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	071b      	lsls	r3, r3, #28
 8002072:	491b      	ldr	r1, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff f841 	bl	8001104 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff f83d 	bl	8001104 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e064      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x452>
 80020a4:	e05c      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_OscConfig+0x4b4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f82a 	bl	8001104 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f826 	bl	8001104 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04d      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x480>
 80020d2:	e045      	b.n	8002160 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e040      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_RCC_OscConfig+0x538>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d030      	beq.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d129      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d122      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002124:	4293      	cmp	r3, r2
 8002126:	d119      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d10f      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07b      	b.n	800227a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002192:	d009      	beq.n	80021a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
 800219a:	e005      	b.n	80021a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fdb0 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222c:	ea42 0103 	orr.w	r1, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	f003 0104 	and.w	r1, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f003 0210 	and.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b088      	sub	sp, #32
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002292:	f7fe ff37 	bl	8001104 <HAL_GetTick>
 8002296:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	e12a      	b.n	8002502 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_Transmit+0x36>
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e122      	b.n	8002502 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Transmit+0x48>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e11b      	b.n	8002502 <HAL_SPI_Transmit+0x280>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2203      	movs	r2, #3
 80022d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002318:	d10f      	bne.n	800233a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d007      	beq.n	8002358 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002360:	d152      	bne.n	8002408 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_SPI_Transmit+0xee>
 800236a:	8b7b      	ldrh	r3, [r7, #26]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d145      	bne.n	80023fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	1c9a      	adds	r2, r3, #2
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002394:	e032      	b.n	80023fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d112      	bne.n	80023ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023c8:	e018      	b.n	80023fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ca:	f7fe fe9b 	bl	8001104 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d803      	bhi.n	80023e2 <HAL_SPI_Transmit+0x160>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d102      	bne.n	80023e8 <HAL_SPI_Transmit+0x166>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e082      	b.n	8002502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1c7      	bne.n	8002396 <HAL_SPI_Transmit+0x114>
 8002406:	e053      	b.n	80024b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_SPI_Transmit+0x194>
 8002410:	8b7b      	ldrh	r3, [r7, #26]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d147      	bne.n	80024a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800243c:	e033      	b.n	80024a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d113      	bne.n	8002474 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002472:	e018      	b.n	80024a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002474:	f7fe fe46 	bl	8001104 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d803      	bhi.n	800248c <HAL_SPI_Transmit+0x20a>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d102      	bne.n	8002492 <HAL_SPI_Transmit+0x210>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e02d      	b.n	8002502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1c6      	bne.n	800243e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f8b1 	bl	800261c <SPI_EndRxTxTransaction>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002500:	2300      	movs	r3, #0
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800251c:	f7fe fdf2 	bl	8001104 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800252c:	f7fe fdea 	bl	8001104 <HAL_GetTick>
 8002530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	015b      	lsls	r3, r3, #5
 8002538:	0d1b      	lsrs	r3, r3, #20
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002542:	e054      	b.n	80025ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d050      	beq.n	80025ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800254c:	f7fe fdda 	bl	8001104 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	d902      	bls.n	8002562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13d      	bne.n	80025de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800257a:	d111      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002584:	d004      	beq.n	8002590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258e:	d107      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a8:	d10f      	bne.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e017      	b.n	800260e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4013      	ands	r3, r2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	429a      	cmp	r2, r3
 800260a:	d19b      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000

0800261c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2201      	movs	r2, #1
 8002630:	2102      	movs	r1, #2
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff ff6a 	bl	800250c <SPI_WaitFlagStateUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e032      	b.n	80026b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <SPI_EndRxTxTransaction+0xa0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <SPI_EndRxTxTransaction+0xa4>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0d5b      	lsrs	r3, r3, #21
 800265a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800266c:	d112      	bne.n	8002694 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ff47 	bl	800250c <SPI_WaitFlagStateUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e00f      	b.n	80026b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3b01      	subs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b80      	cmp	r3, #128	@ 0x80
 80026ac:	d0f2      	beq.n	8002694 <SPI_EndRxTxTransaction+0x78>
 80026ae:	e000      	b.n	80026b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80026b0:	bf00      	nop
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000000 	.word	0x20000000
 80026c0:	165e9f81 	.word	0x165e9f81

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fb64 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 fa16 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01b      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0202 	mvn.w	r2, #2
 8002796:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9a3 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f995 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9a6 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01b      	beq.n	8002812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0204 	mvn.w	r2, #4
 80027e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f97d 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 80027fe:	e005      	b.n	800280c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f96f 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f980 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01b      	beq.n	800285e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f06f 0208 	mvn.w	r2, #8
 800282e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f957 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 800284a:	e005      	b.n	8002858 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f949 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f95a 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01b      	beq.n	80028aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f06f 0210 	mvn.w	r2, #16
 800287a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2208      	movs	r2, #8
 8002880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f931 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8002896:	e005      	b.n	80028a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f923 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f934 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0201 	mvn.w	r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f901 	bl	8002ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 faed 	bl	8002ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f905 	bl	8002b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0220 	mvn.w	r2, #32
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fabf 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_TIM_ConfigClockSource+0x1c>
 800295a:	2302      	movs	r3, #2
 800295c:	e0b4      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x186>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800297c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002984:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002996:	d03e      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xd4>
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299c:	f200 8087 	bhi.w	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a4:	f000 8086 	beq.w	8002ab4 <HAL_TIM_ConfigClockSource+0x172>
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ac:	d87f      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029ae:	2b70      	cmp	r3, #112	@ 0x70
 80029b0:	d01a      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xa6>
 80029b2:	2b70      	cmp	r3, #112	@ 0x70
 80029b4:	d87b      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029b6:	2b60      	cmp	r3, #96	@ 0x60
 80029b8:	d050      	beq.n	8002a5c <HAL_TIM_ConfigClockSource+0x11a>
 80029ba:	2b60      	cmp	r3, #96	@ 0x60
 80029bc:	d877      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029be:	2b50      	cmp	r3, #80	@ 0x50
 80029c0:	d03c      	beq.n	8002a3c <HAL_TIM_ConfigClockSource+0xfa>
 80029c2:	2b50      	cmp	r3, #80	@ 0x50
 80029c4:	d873      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d058      	beq.n	8002a7c <HAL_TIM_ConfigClockSource+0x13a>
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d86f      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029ce:	2b30      	cmp	r3, #48	@ 0x30
 80029d0:	d064      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x15a>
 80029d2:	2b30      	cmp	r3, #48	@ 0x30
 80029d4:	d86b      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d060      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x15a>
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d867      	bhi.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d05c      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x15a>
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d05a      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0x15a>
 80029e6:	e062      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	f000 f9c2 	bl	8002d80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]
      break;
 8002a14:	e04f      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a26:	f000 f9ab 	bl	8002d80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a38:	609a      	str	r2, [r3, #8]
      break;
 8002a3a:	e03c      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f000 f91f 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2150      	movs	r1, #80	@ 0x50
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f978 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002a5a:	e02c      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f000 f93e 	bl	8002cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2160      	movs	r1, #96	@ 0x60
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f968 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002a7a:	e01c      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f000 f8ff 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2140      	movs	r1, #64	@ 0x40
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f958 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002a9a:	e00c      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 f94f 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002aac:	e003      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab2:	e000      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a46      	ldr	r2, [pc, #280]	@ (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d00f      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <TIM_Base_SetConfig+0x130>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <TIM_Base_SetConfig+0x134>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a41      	ldr	r2, [pc, #260]	@ (8002c6c <TIM_Base_SetConfig+0x138>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	@ (8002c70 <TIM_Base_SetConfig+0x13c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a35      	ldr	r2, [pc, #212]	@ (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b94:	d027      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a32      	ldr	r2, [pc, #200]	@ (8002c64 <TIM_Base_SetConfig+0x130>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d023      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	@ (8002c68 <TIM_Base_SetConfig+0x134>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a30      	ldr	r2, [pc, #192]	@ (8002c6c <TIM_Base_SetConfig+0x138>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c70 <TIM_Base_SetConfig+0x13c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c74 <TIM_Base_SetConfig+0x140>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c78 <TIM_Base_SetConfig+0x144>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <TIM_Base_SetConfig+0x148>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c80 <TIM_Base_SetConfig+0x14c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <TIM_Base_SetConfig+0x150>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a29      	ldr	r2, [pc, #164]	@ (8002c88 <TIM_Base_SetConfig+0x154>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0xf8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <TIM_Base_SetConfig+0x13c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d103      	bne.n	8002c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
  }
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40010400 	.word	0x40010400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800
 8002c80:	40001800 	.word	0x40001800
 8002c84:	40001c00 	.word	0x40001c00
 8002c88:	40002000 	.word	0x40002000

08002c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0201 	bic.w	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 030a 	bic.w	r3, r3, #10
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 0210 	bic.w	r2, r3, #16
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	031b      	lsls	r3, r3, #12
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f043 0307 	orr.w	r3, r3, #7
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e05a      	b.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d01d      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10c      	bne.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40010400 	.word	0x40010400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40001800 	.word	0x40001800

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <std>:
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8002eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eee:	6083      	str	r3, [r0, #8]
 8002ef0:	8181      	strh	r1, [r0, #12]
 8002ef2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ef4:	81c2      	strh	r2, [r0, #14]
 8002ef6:	6183      	str	r3, [r0, #24]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	2208      	movs	r2, #8
 8002efc:	305c      	adds	r0, #92	@ 0x5c
 8002efe:	f000 fa01 	bl	8003304 <memset>
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <std+0x58>)
 8002f04:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <std+0x5c>)
 8002f08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <std+0x60>)
 8002f0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <std+0x64>)
 8002f10:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <std+0x68>)
 8002f14:	6224      	str	r4, [r4, #32]
 8002f16:	429c      	cmp	r4, r3
 8002f18:	d006      	beq.n	8002f28 <std+0x48>
 8002f1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f1e:	4294      	cmp	r4, r2
 8002f20:	d002      	beq.n	8002f28 <std+0x48>
 8002f22:	33d0      	adds	r3, #208	@ 0xd0
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d105      	bne.n	8002f34 <std+0x54>
 8002f28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f30:	f000 ba60 	b.w	80033f4 <__retarget_lock_init_recursive>
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	08003155 	.word	0x08003155
 8002f3c:	08003177 	.word	0x08003177
 8002f40:	080031af 	.word	0x080031af
 8002f44:	080031d3 	.word	0x080031d3
 8002f48:	2000012c 	.word	0x2000012c

08002f4c <stdio_exit_handler>:
 8002f4c:	4a02      	ldr	r2, [pc, #8]	@ (8002f58 <stdio_exit_handler+0xc>)
 8002f4e:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <stdio_exit_handler+0x10>)
 8002f50:	4803      	ldr	r0, [pc, #12]	@ (8002f60 <stdio_exit_handler+0x14>)
 8002f52:	f000 b869 	b.w	8003028 <_fwalk_sglue>
 8002f56:	bf00      	nop
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	08003c91 	.word	0x08003c91
 8002f60:	2000001c 	.word	0x2000001c

08002f64 <cleanup_stdio>:
 8002f64:	6841      	ldr	r1, [r0, #4]
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <cleanup_stdio+0x34>)
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	d001      	beq.n	8002f74 <cleanup_stdio+0x10>
 8002f70:	f000 fe8e 	bl	8003c90 <_fflush_r>
 8002f74:	68a1      	ldr	r1, [r4, #8]
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <cleanup_stdio+0x38>)
 8002f78:	4299      	cmp	r1, r3
 8002f7a:	d002      	beq.n	8002f82 <cleanup_stdio+0x1e>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 fe87 	bl	8003c90 <_fflush_r>
 8002f82:	68e1      	ldr	r1, [r4, #12]
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <cleanup_stdio+0x3c>)
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d004      	beq.n	8002f94 <cleanup_stdio+0x30>
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f90:	f000 be7e 	b.w	8003c90 <_fflush_r>
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	bf00      	nop
 8002f98:	2000012c 	.word	0x2000012c
 8002f9c:	20000194 	.word	0x20000194
 8002fa0:	200001fc 	.word	0x200001fc

08002fa4 <global_stdio_init.part.0>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <global_stdio_init.part.0+0x30>)
 8002fa8:	4c0b      	ldr	r4, [pc, #44]	@ (8002fd8 <global_stdio_init.part.0+0x34>)
 8002faa:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <global_stdio_init.part.0+0x38>)
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	4620      	mov	r0, r4
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	f7ff ff94 	bl	8002ee0 <std>
 8002fb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	f7ff ff8e 	bl	8002ee0 <std>
 8002fc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fc8:	2202      	movs	r2, #2
 8002fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fce:	2112      	movs	r1, #18
 8002fd0:	f7ff bf86 	b.w	8002ee0 <std>
 8002fd4:	20000264 	.word	0x20000264
 8002fd8:	2000012c 	.word	0x2000012c
 8002fdc:	08002f4d 	.word	0x08002f4d

08002fe0 <__sfp_lock_acquire>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	@ (8002fe8 <__sfp_lock_acquire+0x8>)
 8002fe2:	f000 ba08 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	2000026d 	.word	0x2000026d

08002fec <__sfp_lock_release>:
 8002fec:	4801      	ldr	r0, [pc, #4]	@ (8002ff4 <__sfp_lock_release+0x8>)
 8002fee:	f000 ba03 	b.w	80033f8 <__retarget_lock_release_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	2000026d 	.word	0x2000026d

08002ff8 <__sinit>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	f7ff fff0 	bl	8002fe0 <__sfp_lock_acquire>
 8003000:	6a23      	ldr	r3, [r4, #32]
 8003002:	b11b      	cbz	r3, 800300c <__sinit+0x14>
 8003004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003008:	f7ff bff0 	b.w	8002fec <__sfp_lock_release>
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <__sinit+0x28>)
 800300e:	6223      	str	r3, [r4, #32]
 8003010:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <__sinit+0x2c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f5      	bne.n	8003004 <__sinit+0xc>
 8003018:	f7ff ffc4 	bl	8002fa4 <global_stdio_init.part.0>
 800301c:	e7f2      	b.n	8003004 <__sinit+0xc>
 800301e:	bf00      	nop
 8003020:	08002f65 	.word	0x08002f65
 8003024:	20000264 	.word	0x20000264

08003028 <_fwalk_sglue>:
 8003028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800302c:	4607      	mov	r7, r0
 800302e:	4688      	mov	r8, r1
 8003030:	4614      	mov	r4, r2
 8003032:	2600      	movs	r6, #0
 8003034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003038:	f1b9 0901 	subs.w	r9, r9, #1
 800303c:	d505      	bpl.n	800304a <_fwalk_sglue+0x22>
 800303e:	6824      	ldr	r4, [r4, #0]
 8003040:	2c00      	cmp	r4, #0
 8003042:	d1f7      	bne.n	8003034 <_fwalk_sglue+0xc>
 8003044:	4630      	mov	r0, r6
 8003046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800304a:	89ab      	ldrh	r3, [r5, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d907      	bls.n	8003060 <_fwalk_sglue+0x38>
 8003050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003054:	3301      	adds	r3, #1
 8003056:	d003      	beq.n	8003060 <_fwalk_sglue+0x38>
 8003058:	4629      	mov	r1, r5
 800305a:	4638      	mov	r0, r7
 800305c:	47c0      	blx	r8
 800305e:	4306      	orrs	r6, r0
 8003060:	3568      	adds	r5, #104	@ 0x68
 8003062:	e7e9      	b.n	8003038 <_fwalk_sglue+0x10>

08003064 <iprintf>:
 8003064:	b40f      	push	{r0, r1, r2, r3}
 8003066:	b507      	push	{r0, r1, r2, lr}
 8003068:	4906      	ldr	r1, [pc, #24]	@ (8003084 <iprintf+0x20>)
 800306a:	ab04      	add	r3, sp, #16
 800306c:	6808      	ldr	r0, [r1, #0]
 800306e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003072:	6881      	ldr	r1, [r0, #8]
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	f000 fae3 	bl	8003640 <_vfiprintf_r>
 800307a:	b003      	add	sp, #12
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b004      	add	sp, #16
 8003082:	4770      	bx	lr
 8003084:	20000018 	.word	0x20000018

08003088 <putchar>:
 8003088:	4b02      	ldr	r3, [pc, #8]	@ (8003094 <putchar+0xc>)
 800308a:	4601      	mov	r1, r0
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	6882      	ldr	r2, [r0, #8]
 8003090:	f000 be88 	b.w	8003da4 <_putc_r>
 8003094:	20000018 	.word	0x20000018

08003098 <_puts_r>:
 8003098:	6a03      	ldr	r3, [r0, #32]
 800309a:	b570      	push	{r4, r5, r6, lr}
 800309c:	6884      	ldr	r4, [r0, #8]
 800309e:	4605      	mov	r5, r0
 80030a0:	460e      	mov	r6, r1
 80030a2:	b90b      	cbnz	r3, 80030a8 <_puts_r+0x10>
 80030a4:	f7ff ffa8 	bl	8002ff8 <__sinit>
 80030a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030aa:	07db      	lsls	r3, r3, #31
 80030ac:	d405      	bmi.n	80030ba <_puts_r+0x22>
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	0598      	lsls	r0, r3, #22
 80030b2:	d402      	bmi.n	80030ba <_puts_r+0x22>
 80030b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030b6:	f000 f99e 	bl	80033f6 <__retarget_lock_acquire_recursive>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	0719      	lsls	r1, r3, #28
 80030be:	d502      	bpl.n	80030c6 <_puts_r+0x2e>
 80030c0:	6923      	ldr	r3, [r4, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d135      	bne.n	8003132 <_puts_r+0x9a>
 80030c6:	4621      	mov	r1, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f8c5 	bl	8003258 <__swsetup_r>
 80030ce:	b380      	cbz	r0, 8003132 <_puts_r+0x9a>
 80030d0:	f04f 35ff 	mov.w	r5, #4294967295
 80030d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030d6:	07da      	lsls	r2, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_puts_r+0x4e>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	059b      	lsls	r3, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_puts_r+0x4e>
 80030e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030e2:	f000 f989 	bl	80033f8 <__retarget_lock_release_recursive>
 80030e6:	4628      	mov	r0, r5
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da04      	bge.n	80030f8 <_puts_r+0x60>
 80030ee:	69a2      	ldr	r2, [r4, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dc17      	bgt.n	8003124 <_puts_r+0x8c>
 80030f4:	290a      	cmp	r1, #10
 80030f6:	d015      	beq.n	8003124 <_puts_r+0x8c>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	7019      	strb	r1, [r3, #0]
 8003100:	68a3      	ldr	r3, [r4, #8]
 8003102:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003106:	3b01      	subs	r3, #1
 8003108:	60a3      	str	r3, [r4, #8]
 800310a:	2900      	cmp	r1, #0
 800310c:	d1ed      	bne.n	80030ea <_puts_r+0x52>
 800310e:	2b00      	cmp	r3, #0
 8003110:	da11      	bge.n	8003136 <_puts_r+0x9e>
 8003112:	4622      	mov	r2, r4
 8003114:	210a      	movs	r1, #10
 8003116:	4628      	mov	r0, r5
 8003118:	f000 f85f 	bl	80031da <__swbuf_r>
 800311c:	3001      	adds	r0, #1
 800311e:	d0d7      	beq.n	80030d0 <_puts_r+0x38>
 8003120:	250a      	movs	r5, #10
 8003122:	e7d7      	b.n	80030d4 <_puts_r+0x3c>
 8003124:	4622      	mov	r2, r4
 8003126:	4628      	mov	r0, r5
 8003128:	f000 f857 	bl	80031da <__swbuf_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d1e7      	bne.n	8003100 <_puts_r+0x68>
 8003130:	e7ce      	b.n	80030d0 <_puts_r+0x38>
 8003132:	3e01      	subs	r6, #1
 8003134:	e7e4      	b.n	8003100 <_puts_r+0x68>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	6022      	str	r2, [r4, #0]
 800313c:	220a      	movs	r2, #10
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e7ee      	b.n	8003120 <_puts_r+0x88>
	...

08003144 <puts>:
 8003144:	4b02      	ldr	r3, [pc, #8]	@ (8003150 <puts+0xc>)
 8003146:	4601      	mov	r1, r0
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7ff bfa5 	b.w	8003098 <_puts_r>
 800314e:	bf00      	nop
 8003150:	20000018 	.word	0x20000018

08003154 <__sread>:
 8003154:	b510      	push	{r4, lr}
 8003156:	460c      	mov	r4, r1
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	f000 f8fc 	bl	8003358 <_read_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	bfab      	itete	ge
 8003164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003166:	89a3      	ldrhlt	r3, [r4, #12]
 8003168:	181b      	addge	r3, r3, r0
 800316a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800316e:	bfac      	ite	ge
 8003170:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003172:	81a3      	strhlt	r3, [r4, #12]
 8003174:	bd10      	pop	{r4, pc}

08003176 <__swrite>:
 8003176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317a:	461f      	mov	r7, r3
 800317c:	898b      	ldrh	r3, [r1, #12]
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	4605      	mov	r5, r0
 8003182:	460c      	mov	r4, r1
 8003184:	4616      	mov	r6, r2
 8003186:	d505      	bpl.n	8003194 <__swrite+0x1e>
 8003188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318c:	2302      	movs	r3, #2
 800318e:	2200      	movs	r2, #0
 8003190:	f000 f8d0 	bl	8003334 <_lseek_r>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800319a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	4632      	mov	r2, r6
 80031a2:	463b      	mov	r3, r7
 80031a4:	4628      	mov	r0, r5
 80031a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031aa:	f000 b8e7 	b.w	800337c <_write_r>

080031ae <__sseek>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	460c      	mov	r4, r1
 80031b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b6:	f000 f8bd 	bl	8003334 <_lseek_r>
 80031ba:	1c43      	adds	r3, r0, #1
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	bf15      	itete	ne
 80031c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031ca:	81a3      	strheq	r3, [r4, #12]
 80031cc:	bf18      	it	ne
 80031ce:	81a3      	strhne	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__sclose>:
 80031d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d6:	f000 b89d 	b.w	8003314 <_close_r>

080031da <__swbuf_r>:
 80031da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031dc:	460e      	mov	r6, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	4605      	mov	r5, r0
 80031e2:	b118      	cbz	r0, 80031ec <__swbuf_r+0x12>
 80031e4:	6a03      	ldr	r3, [r0, #32]
 80031e6:	b90b      	cbnz	r3, 80031ec <__swbuf_r+0x12>
 80031e8:	f7ff ff06 	bl	8002ff8 <__sinit>
 80031ec:	69a3      	ldr	r3, [r4, #24]
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	071a      	lsls	r2, r3, #28
 80031f4:	d501      	bpl.n	80031fa <__swbuf_r+0x20>
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	b943      	cbnz	r3, 800320c <__swbuf_r+0x32>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f82b 	bl	8003258 <__swsetup_r>
 8003202:	b118      	cbz	r0, 800320c <__swbuf_r+0x32>
 8003204:	f04f 37ff 	mov.w	r7, #4294967295
 8003208:	4638      	mov	r0, r7
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	6922      	ldr	r2, [r4, #16]
 8003210:	1a98      	subs	r0, r3, r2
 8003212:	6963      	ldr	r3, [r4, #20]
 8003214:	b2f6      	uxtb	r6, r6
 8003216:	4283      	cmp	r3, r0
 8003218:	4637      	mov	r7, r6
 800321a:	dc05      	bgt.n	8003228 <__swbuf_r+0x4e>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 fd36 	bl	8003c90 <_fflush_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d1ed      	bne.n	8003204 <__swbuf_r+0x2a>
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	3b01      	subs	r3, #1
 800322c:	60a3      	str	r3, [r4, #8]
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	6022      	str	r2, [r4, #0]
 8003234:	701e      	strb	r6, [r3, #0]
 8003236:	6962      	ldr	r2, [r4, #20]
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	429a      	cmp	r2, r3
 800323c:	d004      	beq.n	8003248 <__swbuf_r+0x6e>
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	07db      	lsls	r3, r3, #31
 8003242:	d5e1      	bpl.n	8003208 <__swbuf_r+0x2e>
 8003244:	2e0a      	cmp	r6, #10
 8003246:	d1df      	bne.n	8003208 <__swbuf_r+0x2e>
 8003248:	4621      	mov	r1, r4
 800324a:	4628      	mov	r0, r5
 800324c:	f000 fd20 	bl	8003c90 <_fflush_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	d0d9      	beq.n	8003208 <__swbuf_r+0x2e>
 8003254:	e7d6      	b.n	8003204 <__swbuf_r+0x2a>
	...

08003258 <__swsetup_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <__swsetup_r+0xa8>)
 800325c:	4605      	mov	r5, r0
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	460c      	mov	r4, r1
 8003262:	b118      	cbz	r0, 800326c <__swsetup_r+0x14>
 8003264:	6a03      	ldr	r3, [r0, #32]
 8003266:	b90b      	cbnz	r3, 800326c <__swsetup_r+0x14>
 8003268:	f7ff fec6 	bl	8002ff8 <__sinit>
 800326c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003270:	0719      	lsls	r1, r3, #28
 8003272:	d422      	bmi.n	80032ba <__swsetup_r+0x62>
 8003274:	06da      	lsls	r2, r3, #27
 8003276:	d407      	bmi.n	8003288 <__swsetup_r+0x30>
 8003278:	2209      	movs	r2, #9
 800327a:	602a      	str	r2, [r5, #0]
 800327c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	f04f 30ff 	mov.w	r0, #4294967295
 8003286:	e033      	b.n	80032f0 <__swsetup_r+0x98>
 8003288:	0758      	lsls	r0, r3, #29
 800328a:	d512      	bpl.n	80032b2 <__swsetup_r+0x5a>
 800328c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800328e:	b141      	cbz	r1, 80032a2 <__swsetup_r+0x4a>
 8003290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003294:	4299      	cmp	r1, r3
 8003296:	d002      	beq.n	800329e <__swsetup_r+0x46>
 8003298:	4628      	mov	r0, r5
 800329a:	f000 f8af 	bl	80033fc <_free_r>
 800329e:	2300      	movs	r3, #0
 80032a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	2300      	movs	r3, #0
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	b94b      	cbnz	r3, 80032d2 <__swsetup_r+0x7a>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c8:	d003      	beq.n	80032d2 <__swsetup_r+0x7a>
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 fd2d 	bl	8003d2c <__smakebuf_r>
 80032d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d6:	f013 0201 	ands.w	r2, r3, #1
 80032da:	d00a      	beq.n	80032f2 <__swsetup_r+0x9a>
 80032dc:	2200      	movs	r2, #0
 80032de:	60a2      	str	r2, [r4, #8]
 80032e0:	6962      	ldr	r2, [r4, #20]
 80032e2:	4252      	negs	r2, r2
 80032e4:	61a2      	str	r2, [r4, #24]
 80032e6:	6922      	ldr	r2, [r4, #16]
 80032e8:	b942      	cbnz	r2, 80032fc <__swsetup_r+0xa4>
 80032ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032ee:	d1c5      	bne.n	800327c <__swsetup_r+0x24>
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	0799      	lsls	r1, r3, #30
 80032f4:	bf58      	it	pl
 80032f6:	6962      	ldrpl	r2, [r4, #20]
 80032f8:	60a2      	str	r2, [r4, #8]
 80032fa:	e7f4      	b.n	80032e6 <__swsetup_r+0x8e>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7f7      	b.n	80032f0 <__swsetup_r+0x98>
 8003300:	20000018 	.word	0x20000018

08003304 <memset>:
 8003304:	4402      	add	r2, r0
 8003306:	4603      	mov	r3, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <_close_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d06      	ldr	r5, [pc, #24]	@ (8003330 <_close_r+0x1c>)
 8003318:	2300      	movs	r3, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd fde3 	bl	8000eea <_close>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_close_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_close_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000268 	.word	0x20000268

08003334 <_lseek_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	@ (8003354 <_lseek_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd fdf8 	bl	8000f38 <_lseek>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_lseek_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_lseek_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000268 	.word	0x20000268

08003358 <_read_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4d07      	ldr	r5, [pc, #28]	@ (8003378 <_read_r+0x20>)
 800335c:	4604      	mov	r4, r0
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	2200      	movs	r2, #0
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd fd86 	bl	8000e78 <_read>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_read_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_read_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000268 	.word	0x20000268

0800337c <_write_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	@ (800339c <_write_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fd91 	bl	8000eb2 <_write>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_write_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_write_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000268 	.word	0x20000268

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	@ (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000018 	.word	0x20000018

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	@ (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	@ (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	@ (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	@ (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fd56 	bl	8003e70 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08003fc0 	.word	0x08003fc0
 80033e8:	08003fc0 	.word	0x08003fc0
 80033ec:	08003fc0 	.word	0x08003fc0
 80033f0:	08003fc4 	.word	0x08003fc4

080033f4 <__retarget_lock_init_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_acquire_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <__retarget_lock_release_recursive>:
 80033f8:	4770      	bx	lr
	...

080033fc <_free_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4605      	mov	r5, r0
 8003400:	2900      	cmp	r1, #0
 8003402:	d041      	beq.n	8003488 <_free_r+0x8c>
 8003404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003408:	1f0c      	subs	r4, r1, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfb8      	it	lt
 800340e:	18e4      	addlt	r4, r4, r3
 8003410:	f000 f8e0 	bl	80035d4 <__malloc_lock>
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <_free_r+0x90>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	b933      	cbnz	r3, 8003428 <_free_r+0x2c>
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6014      	str	r4, [r2, #0]
 800341e:	4628      	mov	r0, r5
 8003420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003424:	f000 b8dc 	b.w	80035e0 <__malloc_unlock>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x42>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	1821      	adds	r1, r4, r0
 8003430:	428b      	cmp	r3, r1
 8003432:	bf01      	itttt	eq
 8003434:	6819      	ldreq	r1, [r3, #0]
 8003436:	685b      	ldreq	r3, [r3, #4]
 8003438:	1809      	addeq	r1, r1, r0
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	e7ed      	b.n	800341a <_free_r+0x1e>
 800343e:	461a      	mov	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b10b      	cbz	r3, 8003448 <_free_r+0x4c>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d9fa      	bls.n	800343e <_free_r+0x42>
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	1850      	adds	r0, r2, r1
 800344c:	42a0      	cmp	r0, r4
 800344e:	d10b      	bne.n	8003468 <_free_r+0x6c>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	4401      	add	r1, r0
 8003454:	1850      	adds	r0, r2, r1
 8003456:	4283      	cmp	r3, r0
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	d1e0      	bne.n	800341e <_free_r+0x22>
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	4408      	add	r0, r1
 8003464:	6010      	str	r0, [r2, #0]
 8003466:	e7da      	b.n	800341e <_free_r+0x22>
 8003468:	d902      	bls.n	8003470 <_free_r+0x74>
 800346a:	230c      	movs	r3, #12
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	e7d6      	b.n	800341e <_free_r+0x22>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	1821      	adds	r1, r4, r0
 8003474:	428b      	cmp	r3, r1
 8003476:	bf04      	itt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	bf04      	itt	eq
 8003480:	1809      	addeq	r1, r1, r0
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6054      	str	r4, [r2, #4]
 8003486:	e7ca      	b.n	800341e <_free_r+0x22>
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	20000274 	.word	0x20000274

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0f      	ldr	r6, [pc, #60]	@ (80034d0 <sbrk_aligned+0x40>)
 8003494:	460c      	mov	r4, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	4605      	mov	r5, r0
 800349a:	b911      	cbnz	r1, 80034a2 <sbrk_aligned+0x12>
 800349c:	f000 fcd8 	bl	8003e50 <_sbrk_r>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 fcd3 	bl	8003e50 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d103      	bne.n	80034b6 <sbrk_aligned+0x26>
 80034ae:	f04f 34ff 	mov.w	r4, #4294967295
 80034b2:	4620      	mov	r0, r4
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	1cc4      	adds	r4, r0, #3
 80034b8:	f024 0403 	bic.w	r4, r4, #3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d0f8      	beq.n	80034b2 <sbrk_aligned+0x22>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fcc4 	bl	8003e50 <_sbrk_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d1f2      	bne.n	80034b2 <sbrk_aligned+0x22>
 80034cc:	e7ef      	b.n	80034ae <sbrk_aligned+0x1e>
 80034ce:	bf00      	nop
 80034d0:	20000270 	.word	0x20000270

080034d4 <_malloc_r>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	1ccd      	adds	r5, r1, #3
 80034da:	f025 0503 	bic.w	r5, r5, #3
 80034de:	3508      	adds	r5, #8
 80034e0:	2d0c      	cmp	r5, #12
 80034e2:	bf38      	it	cc
 80034e4:	250c      	movcc	r5, #12
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	4606      	mov	r6, r0
 80034ea:	db01      	blt.n	80034f0 <_malloc_r+0x1c>
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d904      	bls.n	80034fa <_malloc_r+0x26>
 80034f0:	230c      	movs	r3, #12
 80034f2:	6033      	str	r3, [r6, #0]
 80034f4:	2000      	movs	r0, #0
 80034f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035d0 <_malloc_r+0xfc>
 80034fe:	f000 f869 	bl	80035d4 <__malloc_lock>
 8003502:	f8d8 3000 	ldr.w	r3, [r8]
 8003506:	461c      	mov	r4, r3
 8003508:	bb44      	cbnz	r4, 800355c <_malloc_r+0x88>
 800350a:	4629      	mov	r1, r5
 800350c:	4630      	mov	r0, r6
 800350e:	f7ff ffbf 	bl	8003490 <sbrk_aligned>
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	4604      	mov	r4, r0
 8003516:	d158      	bne.n	80035ca <_malloc_r+0xf6>
 8003518:	f8d8 4000 	ldr.w	r4, [r8]
 800351c:	4627      	mov	r7, r4
 800351e:	2f00      	cmp	r7, #0
 8003520:	d143      	bne.n	80035aa <_malloc_r+0xd6>
 8003522:	2c00      	cmp	r4, #0
 8003524:	d04b      	beq.n	80035be <_malloc_r+0xea>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	4639      	mov	r1, r7
 800352a:	4630      	mov	r0, r6
 800352c:	eb04 0903 	add.w	r9, r4, r3
 8003530:	f000 fc8e 	bl	8003e50 <_sbrk_r>
 8003534:	4581      	cmp	r9, r0
 8003536:	d142      	bne.n	80035be <_malloc_r+0xea>
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	1a6d      	subs	r5, r5, r1
 800353c:	4629      	mov	r1, r5
 800353e:	4630      	mov	r0, r6
 8003540:	f7ff ffa6 	bl	8003490 <sbrk_aligned>
 8003544:	3001      	adds	r0, #1
 8003546:	d03a      	beq.n	80035be <_malloc_r+0xea>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	442b      	add	r3, r5
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	f8d8 3000 	ldr.w	r3, [r8]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	bb62      	cbnz	r2, 80035b0 <_malloc_r+0xdc>
 8003556:	f8c8 7000 	str.w	r7, [r8]
 800355a:	e00f      	b.n	800357c <_malloc_r+0xa8>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	1b52      	subs	r2, r2, r5
 8003560:	d420      	bmi.n	80035a4 <_malloc_r+0xd0>
 8003562:	2a0b      	cmp	r2, #11
 8003564:	d917      	bls.n	8003596 <_malloc_r+0xc2>
 8003566:	1961      	adds	r1, r4, r5
 8003568:	42a3      	cmp	r3, r4
 800356a:	6025      	str	r5, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	6059      	strne	r1, [r3, #4]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	bf08      	it	eq
 8003574:	f8c8 1000 	streq.w	r1, [r8]
 8003578:	5162      	str	r2, [r4, r5]
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	4630      	mov	r0, r6
 800357e:	f000 f82f 	bl	80035e0 <__malloc_unlock>
 8003582:	f104 000b 	add.w	r0, r4, #11
 8003586:	1d23      	adds	r3, r4, #4
 8003588:	f020 0007 	bic.w	r0, r0, #7
 800358c:	1ac2      	subs	r2, r0, r3
 800358e:	bf1c      	itt	ne
 8003590:	1a1b      	subne	r3, r3, r0
 8003592:	50a3      	strne	r3, [r4, r2]
 8003594:	e7af      	b.n	80034f6 <_malloc_r+0x22>
 8003596:	6862      	ldr	r2, [r4, #4]
 8003598:	42a3      	cmp	r3, r4
 800359a:	bf0c      	ite	eq
 800359c:	f8c8 2000 	streq.w	r2, [r8]
 80035a0:	605a      	strne	r2, [r3, #4]
 80035a2:	e7eb      	b.n	800357c <_malloc_r+0xa8>
 80035a4:	4623      	mov	r3, r4
 80035a6:	6864      	ldr	r4, [r4, #4]
 80035a8:	e7ae      	b.n	8003508 <_malloc_r+0x34>
 80035aa:	463c      	mov	r4, r7
 80035ac:	687f      	ldr	r7, [r7, #4]
 80035ae:	e7b6      	b.n	800351e <_malloc_r+0x4a>
 80035b0:	461a      	mov	r2, r3
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d1fb      	bne.n	80035b0 <_malloc_r+0xdc>
 80035b8:	2300      	movs	r3, #0
 80035ba:	6053      	str	r3, [r2, #4]
 80035bc:	e7de      	b.n	800357c <_malloc_r+0xa8>
 80035be:	230c      	movs	r3, #12
 80035c0:	6033      	str	r3, [r6, #0]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 f80c 	bl	80035e0 <__malloc_unlock>
 80035c8:	e794      	b.n	80034f4 <_malloc_r+0x20>
 80035ca:	6005      	str	r5, [r0, #0]
 80035cc:	e7d6      	b.n	800357c <_malloc_r+0xa8>
 80035ce:	bf00      	nop
 80035d0:	20000274 	.word	0x20000274

080035d4 <__malloc_lock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_lock+0x8>)
 80035d6:	f7ff bf0e 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	2000026c 	.word	0x2000026c

080035e0 <__malloc_unlock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	@ (80035e8 <__malloc_unlock+0x8>)
 80035e2:	f7ff bf09 	b.w	80033f8 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	2000026c 	.word	0x2000026c

080035ec <__sfputc_r>:
 80035ec:	6893      	ldr	r3, [r2, #8]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	b410      	push	{r4}
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	da08      	bge.n	800360a <__sfputc_r+0x1e>
 80035f8:	6994      	ldr	r4, [r2, #24]
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	db01      	blt.n	8003602 <__sfputc_r+0x16>
 80035fe:	290a      	cmp	r1, #10
 8003600:	d103      	bne.n	800360a <__sfputc_r+0x1e>
 8003602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003606:	f7ff bde8 	b.w	80031da <__swbuf_r>
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	1c58      	adds	r0, r3, #1
 800360e:	6010      	str	r0, [r2, #0]
 8003610:	7019      	strb	r1, [r3, #0]
 8003612:	4608      	mov	r0, r1
 8003614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003618:	4770      	bx	lr

0800361a <__sfputs_r>:
 800361a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361c:	4606      	mov	r6, r0
 800361e:	460f      	mov	r7, r1
 8003620:	4614      	mov	r4, r2
 8003622:	18d5      	adds	r5, r2, r3
 8003624:	42ac      	cmp	r4, r5
 8003626:	d101      	bne.n	800362c <__sfputs_r+0x12>
 8003628:	2000      	movs	r0, #0
 800362a:	e007      	b.n	800363c <__sfputs_r+0x22>
 800362c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003630:	463a      	mov	r2, r7
 8003632:	4630      	mov	r0, r6
 8003634:	f7ff ffda 	bl	80035ec <__sfputc_r>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d1f3      	bne.n	8003624 <__sfputs_r+0xa>
 800363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003640 <_vfiprintf_r>:
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	460d      	mov	r5, r1
 8003646:	b09d      	sub	sp, #116	@ 0x74
 8003648:	4614      	mov	r4, r2
 800364a:	4698      	mov	r8, r3
 800364c:	4606      	mov	r6, r0
 800364e:	b118      	cbz	r0, 8003658 <_vfiprintf_r+0x18>
 8003650:	6a03      	ldr	r3, [r0, #32]
 8003652:	b90b      	cbnz	r3, 8003658 <_vfiprintf_r+0x18>
 8003654:	f7ff fcd0 	bl	8002ff8 <__sinit>
 8003658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800365a:	07d9      	lsls	r1, r3, #31
 800365c:	d405      	bmi.n	800366a <_vfiprintf_r+0x2a>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	059a      	lsls	r2, r3, #22
 8003662:	d402      	bmi.n	800366a <_vfiprintf_r+0x2a>
 8003664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003666:	f7ff fec6 	bl	80033f6 <__retarget_lock_acquire_recursive>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	d501      	bpl.n	8003674 <_vfiprintf_r+0x34>
 8003670:	692b      	ldr	r3, [r5, #16]
 8003672:	b99b      	cbnz	r3, 800369c <_vfiprintf_r+0x5c>
 8003674:	4629      	mov	r1, r5
 8003676:	4630      	mov	r0, r6
 8003678:	f7ff fdee 	bl	8003258 <__swsetup_r>
 800367c:	b170      	cbz	r0, 800369c <_vfiprintf_r+0x5c>
 800367e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003680:	07dc      	lsls	r4, r3, #31
 8003682:	d504      	bpl.n	800368e <_vfiprintf_r+0x4e>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b01d      	add	sp, #116	@ 0x74
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	0598      	lsls	r0, r3, #22
 8003692:	d4f7      	bmi.n	8003684 <_vfiprintf_r+0x44>
 8003694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003696:	f7ff feaf 	bl	80033f8 <__retarget_lock_release_recursive>
 800369a:	e7f3      	b.n	8003684 <_vfiprintf_r+0x44>
 800369c:	2300      	movs	r3, #0
 800369e:	9309      	str	r3, [sp, #36]	@ 0x24
 80036a0:	2320      	movs	r3, #32
 80036a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036aa:	2330      	movs	r3, #48	@ 0x30
 80036ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800385c <_vfiprintf_r+0x21c>
 80036b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036b4:	f04f 0901 	mov.w	r9, #1
 80036b8:	4623      	mov	r3, r4
 80036ba:	469a      	mov	sl, r3
 80036bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036c0:	b10a      	cbz	r2, 80036c6 <_vfiprintf_r+0x86>
 80036c2:	2a25      	cmp	r2, #37	@ 0x25
 80036c4:	d1f9      	bne.n	80036ba <_vfiprintf_r+0x7a>
 80036c6:	ebba 0b04 	subs.w	fp, sl, r4
 80036ca:	d00b      	beq.n	80036e4 <_vfiprintf_r+0xa4>
 80036cc:	465b      	mov	r3, fp
 80036ce:	4622      	mov	r2, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7ff ffa1 	bl	800361a <__sfputs_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	f000 80a7 	beq.w	800382c <_vfiprintf_r+0x1ec>
 80036de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036e0:	445a      	add	r2, fp
 80036e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80036e4:	f89a 3000 	ldrb.w	r3, [sl]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 809f 	beq.w	800382c <_vfiprintf_r+0x1ec>
 80036ee:	2300      	movs	r3, #0
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f8:	f10a 0a01 	add.w	sl, sl, #1
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	9307      	str	r3, [sp, #28]
 8003700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003704:	931a      	str	r3, [sp, #104]	@ 0x68
 8003706:	4654      	mov	r4, sl
 8003708:	2205      	movs	r2, #5
 800370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370e:	4853      	ldr	r0, [pc, #332]	@ (800385c <_vfiprintf_r+0x21c>)
 8003710:	f7fc fd7e 	bl	8000210 <memchr>
 8003714:	9a04      	ldr	r2, [sp, #16]
 8003716:	b9d8      	cbnz	r0, 8003750 <_vfiprintf_r+0x110>
 8003718:	06d1      	lsls	r1, r2, #27
 800371a:	bf44      	itt	mi
 800371c:	2320      	movmi	r3, #32
 800371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003722:	0713      	lsls	r3, r2, #28
 8003724:	bf44      	itt	mi
 8003726:	232b      	movmi	r3, #43	@ 0x2b
 8003728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800372c:	f89a 3000 	ldrb.w	r3, [sl]
 8003730:	2b2a      	cmp	r3, #42	@ 0x2a
 8003732:	d015      	beq.n	8003760 <_vfiprintf_r+0x120>
 8003734:	9a07      	ldr	r2, [sp, #28]
 8003736:	4654      	mov	r4, sl
 8003738:	2000      	movs	r0, #0
 800373a:	f04f 0c0a 	mov.w	ip, #10
 800373e:	4621      	mov	r1, r4
 8003740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003744:	3b30      	subs	r3, #48	@ 0x30
 8003746:	2b09      	cmp	r3, #9
 8003748:	d94b      	bls.n	80037e2 <_vfiprintf_r+0x1a2>
 800374a:	b1b0      	cbz	r0, 800377a <_vfiprintf_r+0x13a>
 800374c:	9207      	str	r2, [sp, #28]
 800374e:	e014      	b.n	800377a <_vfiprintf_r+0x13a>
 8003750:	eba0 0308 	sub.w	r3, r0, r8
 8003754:	fa09 f303 	lsl.w	r3, r9, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	9304      	str	r3, [sp, #16]
 800375c:	46a2      	mov	sl, r4
 800375e:	e7d2      	b.n	8003706 <_vfiprintf_r+0xc6>
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	1d19      	adds	r1, r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	9103      	str	r1, [sp, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	bfbb      	ittet	lt
 800376c:	425b      	neglt	r3, r3
 800376e:	f042 0202 	orrlt.w	r2, r2, #2
 8003772:	9307      	strge	r3, [sp, #28]
 8003774:	9307      	strlt	r3, [sp, #28]
 8003776:	bfb8      	it	lt
 8003778:	9204      	strlt	r2, [sp, #16]
 800377a:	7823      	ldrb	r3, [r4, #0]
 800377c:	2b2e      	cmp	r3, #46	@ 0x2e
 800377e:	d10a      	bne.n	8003796 <_vfiprintf_r+0x156>
 8003780:	7863      	ldrb	r3, [r4, #1]
 8003782:	2b2a      	cmp	r3, #42	@ 0x2a
 8003784:	d132      	bne.n	80037ec <_vfiprintf_r+0x1ac>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	9203      	str	r2, [sp, #12]
 800378e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003792:	3402      	adds	r4, #2
 8003794:	9305      	str	r3, [sp, #20]
 8003796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800386c <_vfiprintf_r+0x22c>
 800379a:	7821      	ldrb	r1, [r4, #0]
 800379c:	2203      	movs	r2, #3
 800379e:	4650      	mov	r0, sl
 80037a0:	f7fc fd36 	bl	8000210 <memchr>
 80037a4:	b138      	cbz	r0, 80037b6 <_vfiprintf_r+0x176>
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	eba0 000a 	sub.w	r0, r0, sl
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	4082      	lsls	r2, r0
 80037b0:	4313      	orrs	r3, r2
 80037b2:	3401      	adds	r4, #1
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ba:	4829      	ldr	r0, [pc, #164]	@ (8003860 <_vfiprintf_r+0x220>)
 80037bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037c0:	2206      	movs	r2, #6
 80037c2:	f7fc fd25 	bl	8000210 <memchr>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d03f      	beq.n	800384a <_vfiprintf_r+0x20a>
 80037ca:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <_vfiprintf_r+0x224>)
 80037cc:	bb1b      	cbnz	r3, 8003816 <_vfiprintf_r+0x1d6>
 80037ce:	9b03      	ldr	r3, [sp, #12]
 80037d0:	3307      	adds	r3, #7
 80037d2:	f023 0307 	bic.w	r3, r3, #7
 80037d6:	3308      	adds	r3, #8
 80037d8:	9303      	str	r3, [sp, #12]
 80037da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037dc:	443b      	add	r3, r7
 80037de:	9309      	str	r3, [sp, #36]	@ 0x24
 80037e0:	e76a      	b.n	80036b8 <_vfiprintf_r+0x78>
 80037e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e6:	460c      	mov	r4, r1
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7a8      	b.n	800373e <_vfiprintf_r+0xfe>
 80037ec:	2300      	movs	r3, #0
 80037ee:	3401      	adds	r4, #1
 80037f0:	9305      	str	r3, [sp, #20]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f04f 0c0a 	mov.w	ip, #10
 80037f8:	4620      	mov	r0, r4
 80037fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037fe:	3a30      	subs	r2, #48	@ 0x30
 8003800:	2a09      	cmp	r2, #9
 8003802:	d903      	bls.n	800380c <_vfiprintf_r+0x1cc>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0c6      	beq.n	8003796 <_vfiprintf_r+0x156>
 8003808:	9105      	str	r1, [sp, #20]
 800380a:	e7c4      	b.n	8003796 <_vfiprintf_r+0x156>
 800380c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003810:	4604      	mov	r4, r0
 8003812:	2301      	movs	r3, #1
 8003814:	e7f0      	b.n	80037f8 <_vfiprintf_r+0x1b8>
 8003816:	ab03      	add	r3, sp, #12
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	462a      	mov	r2, r5
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <_vfiprintf_r+0x228>)
 800381e:	a904      	add	r1, sp, #16
 8003820:	4630      	mov	r0, r6
 8003822:	f3af 8000 	nop.w
 8003826:	4607      	mov	r7, r0
 8003828:	1c78      	adds	r0, r7, #1
 800382a:	d1d6      	bne.n	80037da <_vfiprintf_r+0x19a>
 800382c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800382e:	07d9      	lsls	r1, r3, #31
 8003830:	d405      	bmi.n	800383e <_vfiprintf_r+0x1fe>
 8003832:	89ab      	ldrh	r3, [r5, #12]
 8003834:	059a      	lsls	r2, r3, #22
 8003836:	d402      	bmi.n	800383e <_vfiprintf_r+0x1fe>
 8003838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800383a:	f7ff fddd 	bl	80033f8 <__retarget_lock_release_recursive>
 800383e:	89ab      	ldrh	r3, [r5, #12]
 8003840:	065b      	lsls	r3, r3, #25
 8003842:	f53f af1f 	bmi.w	8003684 <_vfiprintf_r+0x44>
 8003846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003848:	e71e      	b.n	8003688 <_vfiprintf_r+0x48>
 800384a:	ab03      	add	r3, sp, #12
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	462a      	mov	r2, r5
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <_vfiprintf_r+0x228>)
 8003852:	a904      	add	r1, sp, #16
 8003854:	4630      	mov	r0, r6
 8003856:	f000 f879 	bl	800394c <_printf_i>
 800385a:	e7e4      	b.n	8003826 <_vfiprintf_r+0x1e6>
 800385c:	08003f84 	.word	0x08003f84
 8003860:	08003f8e 	.word	0x08003f8e
 8003864:	00000000 	.word	0x00000000
 8003868:	0800361b 	.word	0x0800361b
 800386c:	08003f8a 	.word	0x08003f8a

08003870 <_printf_common>:
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	4616      	mov	r6, r2
 8003876:	4698      	mov	r8, r3
 8003878:	688a      	ldr	r2, [r1, #8]
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003880:	4293      	cmp	r3, r2
 8003882:	bfb8      	it	lt
 8003884:	4613      	movlt	r3, r2
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800388c:	4607      	mov	r7, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b10a      	cbz	r2, 8003896 <_printf_common+0x26>
 8003892:	3301      	adds	r3, #1
 8003894:	6033      	str	r3, [r6, #0]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	0699      	lsls	r1, r3, #26
 800389a:	bf42      	ittt	mi
 800389c:	6833      	ldrmi	r3, [r6, #0]
 800389e:	3302      	addmi	r3, #2
 80038a0:	6033      	strmi	r3, [r6, #0]
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	f015 0506 	ands.w	r5, r5, #6
 80038a8:	d106      	bne.n	80038b8 <_printf_common+0x48>
 80038aa:	f104 0a19 	add.w	sl, r4, #25
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	6832      	ldr	r2, [r6, #0]
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	dc26      	bgt.n	8003906 <_printf_common+0x96>
 80038b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	3b00      	subs	r3, #0
 80038c0:	bf18      	it	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	0692      	lsls	r2, r2, #26
 80038c6:	d42b      	bmi.n	8003920 <_printf_common+0xb0>
 80038c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038cc:	4641      	mov	r1, r8
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c8      	blx	r9
 80038d2:	3001      	adds	r0, #1
 80038d4:	d01e      	beq.n	8003914 <_printf_common+0xa4>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	6922      	ldr	r2, [r4, #16]
 80038da:	f003 0306 	and.w	r3, r3, #6
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf02      	ittt	eq
 80038e2:	68e5      	ldreq	r5, [r4, #12]
 80038e4:	6833      	ldreq	r3, [r6, #0]
 80038e6:	1aed      	subeq	r5, r5, r3
 80038e8:	68a3      	ldr	r3, [r4, #8]
 80038ea:	bf0c      	ite	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	2500      	movne	r5, #0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bfc4      	itt	gt
 80038f6:	1a9b      	subgt	r3, r3, r2
 80038f8:	18ed      	addgt	r5, r5, r3
 80038fa:	2600      	movs	r6, #0
 80038fc:	341a      	adds	r4, #26
 80038fe:	42b5      	cmp	r5, r6
 8003900:	d11a      	bne.n	8003938 <_printf_common+0xc8>
 8003902:	2000      	movs	r0, #0
 8003904:	e008      	b.n	8003918 <_printf_common+0xa8>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4641      	mov	r1, r8
 800390c:	4638      	mov	r0, r7
 800390e:	47c8      	blx	r9
 8003910:	3001      	adds	r0, #1
 8003912:	d103      	bne.n	800391c <_printf_common+0xac>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391c:	3501      	adds	r5, #1
 800391e:	e7c6      	b.n	80038ae <_printf_common+0x3e>
 8003920:	18e1      	adds	r1, r4, r3
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	2030      	movs	r0, #48	@ 0x30
 8003926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800392a:	4422      	add	r2, r4
 800392c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003934:	3302      	adds	r3, #2
 8003936:	e7c7      	b.n	80038c8 <_printf_common+0x58>
 8003938:	2301      	movs	r3, #1
 800393a:	4622      	mov	r2, r4
 800393c:	4641      	mov	r1, r8
 800393e:	4638      	mov	r0, r7
 8003940:	47c8      	blx	r9
 8003942:	3001      	adds	r0, #1
 8003944:	d0e6      	beq.n	8003914 <_printf_common+0xa4>
 8003946:	3601      	adds	r6, #1
 8003948:	e7d9      	b.n	80038fe <_printf_common+0x8e>
	...

0800394c <_printf_i>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	7e0f      	ldrb	r7, [r1, #24]
 8003952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003954:	2f78      	cmp	r7, #120	@ 0x78
 8003956:	4691      	mov	r9, r2
 8003958:	4680      	mov	r8, r0
 800395a:	460c      	mov	r4, r1
 800395c:	469a      	mov	sl, r3
 800395e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003962:	d807      	bhi.n	8003974 <_printf_i+0x28>
 8003964:	2f62      	cmp	r7, #98	@ 0x62
 8003966:	d80a      	bhi.n	800397e <_printf_i+0x32>
 8003968:	2f00      	cmp	r7, #0
 800396a:	f000 80d1 	beq.w	8003b10 <_printf_i+0x1c4>
 800396e:	2f58      	cmp	r7, #88	@ 0x58
 8003970:	f000 80b8 	beq.w	8003ae4 <_printf_i+0x198>
 8003974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800397c:	e03a      	b.n	80039f4 <_printf_i+0xa8>
 800397e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003982:	2b15      	cmp	r3, #21
 8003984:	d8f6      	bhi.n	8003974 <_printf_i+0x28>
 8003986:	a101      	add	r1, pc, #4	@ (adr r1, 800398c <_printf_i+0x40>)
 8003988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003975 	.word	0x08003975
 8003998:	08003975 	.word	0x08003975
 800399c:	08003975 	.word	0x08003975
 80039a0:	08003975 	.word	0x08003975
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003975 	.word	0x08003975
 80039ac:	08003975 	.word	0x08003975
 80039b0:	08003975 	.word	0x08003975
 80039b4:	08003975 	.word	0x08003975
 80039b8:	08003af7 	.word	0x08003af7
 80039bc:	08003a23 	.word	0x08003a23
 80039c0:	08003ab1 	.word	0x08003ab1
 80039c4:	08003975 	.word	0x08003975
 80039c8:	08003975 	.word	0x08003975
 80039cc:	08003b19 	.word	0x08003b19
 80039d0:	08003975 	.word	0x08003975
 80039d4:	08003a23 	.word	0x08003a23
 80039d8:	08003975 	.word	0x08003975
 80039dc:	08003975 	.word	0x08003975
 80039e0:	08003ab9 	.word	0x08003ab9
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6032      	str	r2, [r6, #0]
 80039ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039f4:	2301      	movs	r3, #1
 80039f6:	e09c      	b.n	8003b32 <_printf_i+0x1e6>
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	6031      	str	r1, [r6, #0]
 8003a00:	0606      	lsls	r6, r0, #24
 8003a02:	d501      	bpl.n	8003a08 <_printf_i+0xbc>
 8003a04:	681d      	ldr	r5, [r3, #0]
 8003a06:	e003      	b.n	8003a10 <_printf_i+0xc4>
 8003a08:	0645      	lsls	r5, r0, #25
 8003a0a:	d5fb      	bpl.n	8003a04 <_printf_i+0xb8>
 8003a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a10:	2d00      	cmp	r5, #0
 8003a12:	da03      	bge.n	8003a1c <_printf_i+0xd0>
 8003a14:	232d      	movs	r3, #45	@ 0x2d
 8003a16:	426d      	negs	r5, r5
 8003a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a1c:	4858      	ldr	r0, [pc, #352]	@ (8003b80 <_printf_i+0x234>)
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e011      	b.n	8003a46 <_printf_i+0xfa>
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	0608      	lsls	r0, r1, #24
 8003a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a2c:	d402      	bmi.n	8003a34 <_printf_i+0xe8>
 8003a2e:	0649      	lsls	r1, r1, #25
 8003a30:	bf48      	it	mi
 8003a32:	b2ad      	uxthmi	r5, r5
 8003a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a36:	4852      	ldr	r0, [pc, #328]	@ (8003b80 <_printf_i+0x234>)
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	bf14      	ite	ne
 8003a3c:	230a      	movne	r3, #10
 8003a3e:	2308      	moveq	r3, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a46:	6866      	ldr	r6, [r4, #4]
 8003a48:	60a6      	str	r6, [r4, #8]
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	db05      	blt.n	8003a5a <_printf_i+0x10e>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	432e      	orrs	r6, r5
 8003a52:	f021 0104 	bic.w	r1, r1, #4
 8003a56:	6021      	str	r1, [r4, #0]
 8003a58:	d04b      	beq.n	8003af2 <_printf_i+0x1a6>
 8003a5a:	4616      	mov	r6, r2
 8003a5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a60:	fb03 5711 	mls	r7, r3, r1, r5
 8003a64:	5dc7      	ldrb	r7, [r0, r7]
 8003a66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a6a:	462f      	mov	r7, r5
 8003a6c:	42bb      	cmp	r3, r7
 8003a6e:	460d      	mov	r5, r1
 8003a70:	d9f4      	bls.n	8003a5c <_printf_i+0x110>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d10b      	bne.n	8003a8e <_printf_i+0x142>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	07df      	lsls	r7, r3, #31
 8003a7a:	d508      	bpl.n	8003a8e <_printf_i+0x142>
 8003a7c:	6923      	ldr	r3, [r4, #16]
 8003a7e:	6861      	ldr	r1, [r4, #4]
 8003a80:	4299      	cmp	r1, r3
 8003a82:	bfde      	ittt	le
 8003a84:	2330      	movle	r3, #48	@ 0x30
 8003a86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a8e:	1b92      	subs	r2, r2, r6
 8003a90:	6122      	str	r2, [r4, #16]
 8003a92:	f8cd a000 	str.w	sl, [sp]
 8003a96:	464b      	mov	r3, r9
 8003a98:	aa03      	add	r2, sp, #12
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	f7ff fee7 	bl	8003870 <_printf_common>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d14a      	bne.n	8003b3c <_printf_i+0x1f0>
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	b004      	add	sp, #16
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	4832      	ldr	r0, [pc, #200]	@ (8003b84 <_printf_i+0x238>)
 8003aba:	2778      	movs	r7, #120	@ 0x78
 8003abc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	6831      	ldr	r1, [r6, #0]
 8003ac4:	061f      	lsls	r7, r3, #24
 8003ac6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aca:	d402      	bmi.n	8003ad2 <_printf_i+0x186>
 8003acc:	065f      	lsls	r7, r3, #25
 8003ace:	bf48      	it	mi
 8003ad0:	b2ad      	uxthmi	r5, r5
 8003ad2:	6031      	str	r1, [r6, #0]
 8003ad4:	07d9      	lsls	r1, r3, #31
 8003ad6:	bf44      	itt	mi
 8003ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8003adc:	6023      	strmi	r3, [r4, #0]
 8003ade:	b11d      	cbz	r5, 8003ae8 <_printf_i+0x19c>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	e7ad      	b.n	8003a40 <_printf_i+0xf4>
 8003ae4:	4826      	ldr	r0, [pc, #152]	@ (8003b80 <_printf_i+0x234>)
 8003ae6:	e7e9      	b.n	8003abc <_printf_i+0x170>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	e7f6      	b.n	8003ae0 <_printf_i+0x194>
 8003af2:	4616      	mov	r6, r2
 8003af4:	e7bd      	b.n	8003a72 <_printf_i+0x126>
 8003af6:	6833      	ldr	r3, [r6, #0]
 8003af8:	6825      	ldr	r5, [r4, #0]
 8003afa:	6961      	ldr	r1, [r4, #20]
 8003afc:	1d18      	adds	r0, r3, #4
 8003afe:	6030      	str	r0, [r6, #0]
 8003b00:	062e      	lsls	r6, r5, #24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	d501      	bpl.n	8003b0a <_printf_i+0x1be>
 8003b06:	6019      	str	r1, [r3, #0]
 8003b08:	e002      	b.n	8003b10 <_printf_i+0x1c4>
 8003b0a:	0668      	lsls	r0, r5, #25
 8003b0c:	d5fb      	bpl.n	8003b06 <_printf_i+0x1ba>
 8003b0e:	8019      	strh	r1, [r3, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	6123      	str	r3, [r4, #16]
 8003b14:	4616      	mov	r6, r2
 8003b16:	e7bc      	b.n	8003a92 <_printf_i+0x146>
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	6032      	str	r2, [r6, #0]
 8003b1e:	681e      	ldr	r6, [r3, #0]
 8003b20:	6862      	ldr	r2, [r4, #4]
 8003b22:	2100      	movs	r1, #0
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7fc fb73 	bl	8000210 <memchr>
 8003b2a:	b108      	cbz	r0, 8003b30 <_printf_i+0x1e4>
 8003b2c:	1b80      	subs	r0, r0, r6
 8003b2e:	6060      	str	r0, [r4, #4]
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	6123      	str	r3, [r4, #16]
 8003b34:	2300      	movs	r3, #0
 8003b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b3a:	e7aa      	b.n	8003a92 <_printf_i+0x146>
 8003b3c:	6923      	ldr	r3, [r4, #16]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4649      	mov	r1, r9
 8003b42:	4640      	mov	r0, r8
 8003b44:	47d0      	blx	sl
 8003b46:	3001      	adds	r0, #1
 8003b48:	d0ad      	beq.n	8003aa6 <_printf_i+0x15a>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	079b      	lsls	r3, r3, #30
 8003b4e:	d413      	bmi.n	8003b78 <_printf_i+0x22c>
 8003b50:	68e0      	ldr	r0, [r4, #12]
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	4298      	cmp	r0, r3
 8003b56:	bfb8      	it	lt
 8003b58:	4618      	movlt	r0, r3
 8003b5a:	e7a6      	b.n	8003aaa <_printf_i+0x15e>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4649      	mov	r1, r9
 8003b62:	4640      	mov	r0, r8
 8003b64:	47d0      	blx	sl
 8003b66:	3001      	adds	r0, #1
 8003b68:	d09d      	beq.n	8003aa6 <_printf_i+0x15a>
 8003b6a:	3501      	adds	r5, #1
 8003b6c:	68e3      	ldr	r3, [r4, #12]
 8003b6e:	9903      	ldr	r1, [sp, #12]
 8003b70:	1a5b      	subs	r3, r3, r1
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	dcf2      	bgt.n	8003b5c <_printf_i+0x210>
 8003b76:	e7eb      	b.n	8003b50 <_printf_i+0x204>
 8003b78:	2500      	movs	r5, #0
 8003b7a:	f104 0619 	add.w	r6, r4, #25
 8003b7e:	e7f5      	b.n	8003b6c <_printf_i+0x220>
 8003b80:	08003f95 	.word	0x08003f95
 8003b84:	08003fa6 	.word	0x08003fa6

08003b88 <__sflush_r>:
 8003b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	0716      	lsls	r6, r2, #28
 8003b92:	4605      	mov	r5, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	d454      	bmi.n	8003c42 <__sflush_r+0xba>
 8003b98:	684b      	ldr	r3, [r1, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dc02      	bgt.n	8003ba4 <__sflush_r+0x1c>
 8003b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dd48      	ble.n	8003c36 <__sflush_r+0xae>
 8003ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d045      	beq.n	8003c36 <__sflush_r+0xae>
 8003baa:	2300      	movs	r3, #0
 8003bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bb0:	682f      	ldr	r7, [r5, #0]
 8003bb2:	6a21      	ldr	r1, [r4, #32]
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	d030      	beq.n	8003c1a <__sflush_r+0x92>
 8003bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	0759      	lsls	r1, r3, #29
 8003bbe:	d505      	bpl.n	8003bcc <__sflush_r+0x44>
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bc6:	b10b      	cbz	r3, 8003bcc <__sflush_r+0x44>
 8003bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bd0:	6a21      	ldr	r1, [r4, #32]
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	47b0      	blx	r6
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	d106      	bne.n	8003bea <__sflush_r+0x62>
 8003bdc:	6829      	ldr	r1, [r5, #0]
 8003bde:	291d      	cmp	r1, #29
 8003be0:	d82b      	bhi.n	8003c3a <__sflush_r+0xb2>
 8003be2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c8c <__sflush_r+0x104>)
 8003be4:	40ca      	lsrs	r2, r1
 8003be6:	07d6      	lsls	r6, r2, #31
 8003be8:	d527      	bpl.n	8003c3a <__sflush_r+0xb2>
 8003bea:	2200      	movs	r2, #0
 8003bec:	6062      	str	r2, [r4, #4]
 8003bee:	04d9      	lsls	r1, r3, #19
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	d504      	bpl.n	8003c00 <__sflush_r+0x78>
 8003bf6:	1c42      	adds	r2, r0, #1
 8003bf8:	d101      	bne.n	8003bfe <__sflush_r+0x76>
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	b903      	cbnz	r3, 8003c00 <__sflush_r+0x78>
 8003bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c02:	602f      	str	r7, [r5, #0]
 8003c04:	b1b9      	cbz	r1, 8003c36 <__sflush_r+0xae>
 8003c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	d002      	beq.n	8003c14 <__sflush_r+0x8c>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7ff fbf4 	bl	80033fc <_free_r>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c18:	e00d      	b.n	8003c36 <__sflush_r+0xae>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b0      	blx	r6
 8003c20:	4602      	mov	r2, r0
 8003c22:	1c50      	adds	r0, r2, #1
 8003c24:	d1c9      	bne.n	8003bba <__sflush_r+0x32>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0c6      	beq.n	8003bba <__sflush_r+0x32>
 8003c2c:	2b1d      	cmp	r3, #29
 8003c2e:	d001      	beq.n	8003c34 <__sflush_r+0xac>
 8003c30:	2b16      	cmp	r3, #22
 8003c32:	d11e      	bne.n	8003c72 <__sflush_r+0xea>
 8003c34:	602f      	str	r7, [r5, #0]
 8003c36:	2000      	movs	r0, #0
 8003c38:	e022      	b.n	8003c80 <__sflush_r+0xf8>
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	e01b      	b.n	8003c7a <__sflush_r+0xf2>
 8003c42:	690f      	ldr	r7, [r1, #16]
 8003c44:	2f00      	cmp	r7, #0
 8003c46:	d0f6      	beq.n	8003c36 <__sflush_r+0xae>
 8003c48:	0793      	lsls	r3, r2, #30
 8003c4a:	680e      	ldr	r6, [r1, #0]
 8003c4c:	bf08      	it	eq
 8003c4e:	694b      	ldreq	r3, [r1, #20]
 8003c50:	600f      	str	r7, [r1, #0]
 8003c52:	bf18      	it	ne
 8003c54:	2300      	movne	r3, #0
 8003c56:	eba6 0807 	sub.w	r8, r6, r7
 8003c5a:	608b      	str	r3, [r1, #8]
 8003c5c:	f1b8 0f00 	cmp.w	r8, #0
 8003c60:	dde9      	ble.n	8003c36 <__sflush_r+0xae>
 8003c62:	6a21      	ldr	r1, [r4, #32]
 8003c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c66:	4643      	mov	r3, r8
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b0      	blx	r6
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	dc08      	bgt.n	8003c84 <__sflush_r+0xfc>
 8003c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	4407      	add	r7, r0
 8003c86:	eba8 0800 	sub.w	r8, r8, r0
 8003c8a:	e7e7      	b.n	8003c5c <__sflush_r+0xd4>
 8003c8c:	20400001 	.word	0x20400001

08003c90 <_fflush_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	4605      	mov	r5, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	b913      	cbnz	r3, 8003ca0 <_fflush_r+0x10>
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	b118      	cbz	r0, 8003caa <_fflush_r+0x1a>
 8003ca2:	6a03      	ldr	r3, [r0, #32]
 8003ca4:	b90b      	cbnz	r3, 8003caa <_fflush_r+0x1a>
 8003ca6:	f7ff f9a7 	bl	8002ff8 <__sinit>
 8003caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f3      	beq.n	8003c9a <_fflush_r+0xa>
 8003cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cb4:	07d0      	lsls	r0, r2, #31
 8003cb6:	d404      	bmi.n	8003cc2 <_fflush_r+0x32>
 8003cb8:	0599      	lsls	r1, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_fflush_r+0x32>
 8003cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cbe:	f7ff fb9a 	bl	80033f6 <__retarget_lock_acquire_recursive>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	f7ff ff5f 	bl	8003b88 <__sflush_r>
 8003cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ccc:	07da      	lsls	r2, r3, #31
 8003cce:	4605      	mov	r5, r0
 8003cd0:	d4e4      	bmi.n	8003c9c <_fflush_r+0xc>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	059b      	lsls	r3, r3, #22
 8003cd6:	d4e1      	bmi.n	8003c9c <_fflush_r+0xc>
 8003cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cda:	f7ff fb8d 	bl	80033f8 <__retarget_lock_release_recursive>
 8003cde:	e7dd      	b.n	8003c9c <_fflush_r+0xc>

08003ce0 <__swhatbuf_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	b096      	sub	sp, #88	@ 0x58
 8003cec:	4615      	mov	r5, r2
 8003cee:	461e      	mov	r6, r3
 8003cf0:	da0d      	bge.n	8003d0e <__swhatbuf_r+0x2e>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cf8:	f04f 0100 	mov.w	r1, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2340      	movne	r3, #64	@ 0x40
 8003d00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d04:	2000      	movs	r0, #0
 8003d06:	6031      	str	r1, [r6, #0]
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	b016      	add	sp, #88	@ 0x58
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
 8003d0e:	466a      	mov	r2, sp
 8003d10:	f000 f87c 	bl	8003e0c <_fstat_r>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	dbec      	blt.n	8003cf2 <__swhatbuf_r+0x12>
 8003d18:	9901      	ldr	r1, [sp, #4]
 8003d1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d22:	4259      	negs	r1, r3
 8003d24:	4159      	adcs	r1, r3
 8003d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d2a:	e7eb      	b.n	8003d04 <__swhatbuf_r+0x24>

08003d2c <__smakebuf_r>:
 8003d2c:	898b      	ldrh	r3, [r1, #12]
 8003d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d30:	079d      	lsls	r5, r3, #30
 8003d32:	4606      	mov	r6, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	d507      	bpl.n	8003d48 <__smakebuf_r+0x1c>
 8003d38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	2301      	movs	r3, #1
 8003d42:	6163      	str	r3, [r4, #20]
 8003d44:	b003      	add	sp, #12
 8003d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d48:	ab01      	add	r3, sp, #4
 8003d4a:	466a      	mov	r2, sp
 8003d4c:	f7ff ffc8 	bl	8003ce0 <__swhatbuf_r>
 8003d50:	9f00      	ldr	r7, [sp, #0]
 8003d52:	4605      	mov	r5, r0
 8003d54:	4639      	mov	r1, r7
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7ff fbbc 	bl	80034d4 <_malloc_r>
 8003d5c:	b948      	cbnz	r0, 8003d72 <__smakebuf_r+0x46>
 8003d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d62:	059a      	lsls	r2, r3, #22
 8003d64:	d4ee      	bmi.n	8003d44 <__smakebuf_r+0x18>
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	81a3      	strh	r3, [r4, #12]
 8003d70:	e7e2      	b.n	8003d38 <__smakebuf_r+0xc>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	6020      	str	r0, [r4, #0]
 8003d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	9b01      	ldr	r3, [sp, #4]
 8003d7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d82:	b15b      	cbz	r3, 8003d9c <__smakebuf_r+0x70>
 8003d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f000 f851 	bl	8003e30 <_isatty_r>
 8003d8e:	b128      	cbz	r0, 8003d9c <__smakebuf_r+0x70>
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	81a3      	strh	r3, [r4, #12]
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	431d      	orrs	r5, r3
 8003da0:	81a5      	strh	r5, [r4, #12]
 8003da2:	e7cf      	b.n	8003d44 <__smakebuf_r+0x18>

08003da4 <_putc_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	460d      	mov	r5, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	4606      	mov	r6, r0
 8003dac:	b118      	cbz	r0, 8003db6 <_putc_r+0x12>
 8003dae:	6a03      	ldr	r3, [r0, #32]
 8003db0:	b90b      	cbnz	r3, 8003db6 <_putc_r+0x12>
 8003db2:	f7ff f921 	bl	8002ff8 <__sinit>
 8003db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003db8:	07d8      	lsls	r0, r3, #31
 8003dba:	d405      	bmi.n	8003dc8 <_putc_r+0x24>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	0599      	lsls	r1, r3, #22
 8003dc0:	d402      	bmi.n	8003dc8 <_putc_r+0x24>
 8003dc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dc4:	f7ff fb17 	bl	80033f6 <__retarget_lock_acquire_recursive>
 8003dc8:	68a3      	ldr	r3, [r4, #8]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	60a3      	str	r3, [r4, #8]
 8003dd0:	da05      	bge.n	8003dde <_putc_r+0x3a>
 8003dd2:	69a2      	ldr	r2, [r4, #24]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	db12      	blt.n	8003dfe <_putc_r+0x5a>
 8003dd8:	b2eb      	uxtb	r3, r5
 8003dda:	2b0a      	cmp	r3, #10
 8003ddc:	d00f      	beq.n	8003dfe <_putc_r+0x5a>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	6022      	str	r2, [r4, #0]
 8003de4:	701d      	strb	r5, [r3, #0]
 8003de6:	b2ed      	uxtb	r5, r5
 8003de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dea:	07da      	lsls	r2, r3, #31
 8003dec:	d405      	bmi.n	8003dfa <_putc_r+0x56>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d402      	bmi.n	8003dfa <_putc_r+0x56>
 8003df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df6:	f7ff faff 	bl	80033f8 <__retarget_lock_release_recursive>
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4622      	mov	r2, r4
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff f9e9 	bl	80031da <__swbuf_r>
 8003e08:	4605      	mov	r5, r0
 8003e0a:	e7ed      	b.n	8003de8 <_putc_r+0x44>

08003e0c <_fstat_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4d07      	ldr	r5, [pc, #28]	@ (8003e2c <_fstat_r+0x20>)
 8003e10:	2300      	movs	r3, #0
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	f7fd f872 	bl	8000f02 <_fstat>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d102      	bne.n	8003e28 <_fstat_r+0x1c>
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	b103      	cbz	r3, 8003e28 <_fstat_r+0x1c>
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	bd38      	pop	{r3, r4, r5, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000268 	.word	0x20000268

08003e30 <_isatty_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4d06      	ldr	r5, [pc, #24]	@ (8003e4c <_isatty_r+0x1c>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	f7fd f871 	bl	8000f22 <_isatty>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_isatty_r+0x1a>
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_isatty_r+0x1a>
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	20000268 	.word	0x20000268

08003e50 <_sbrk_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d06      	ldr	r5, [pc, #24]	@ (8003e6c <_sbrk_r+0x1c>)
 8003e54:	2300      	movs	r3, #0
 8003e56:	4604      	mov	r4, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	f7fd f87a 	bl	8000f54 <_sbrk>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_sbrk_r+0x1a>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_sbrk_r+0x1a>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	20000268 	.word	0x20000268

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
